syntax = "proto3";
package io.token.proto.gateway;

import "google/api/annotations.proto";

import "account.proto";
import "address.proto";
import "bankinfo.proto";
import "banklink.proto";
import "blob.proto";
import "member.proto";
import "money.proto";
import "notification.proto";
import "security.proto";
import "subscriber.proto";
import "token.proto";
import "transaction.proto";
import "transfer.proto";
import "alias.proto";

////////////////////////////////////////////////////////////////////////////////////////////////////
// Paging details.
//
message Page {
  string offset = 1;      // Opaque base-64 encoded offset for the client to roundtrip.
  int32 limit = 2;        // Max number of records to return.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Member registration, key and alias management.
//

message CreateMemberRequest {
  string nonce = 1;
}

message CreateMemberResponse {
  string member_id = 1;
}

message UpdateMemberRequest {
  io.token.proto.common.member.MemberUpdate update = 1;
  io.token.proto.common.security.Signature update_signature = 2;
  repeated io.token.proto.common.member.MemberOperationMetadata metadata = 3;
}

message UpdateMemberResponse {
  io.token.proto.common.member.Member member = 1;
}

message GetMemberRequest {
  string member_id = 1;
}

message GetMemberResponse {
  io.token.proto.common.member.Member member = 1;
}

message ResolveAliasRequest {
  io.token.proto.common.alias.Alias alias = 1;
}

message ResolveAliasResponse {
  io.token.proto.common.token.TokenMember member = 1;
}

message GetAliasesRequest {}

message GetAliasesResponse {
  repeated io.token.proto.common.alias.Alias aliases = 1;
  repeated io.token.proto.common.alias.Alias unverified_aliases = 2;
}

message CompleteVerificationRequest {
  string verification_id = 1;
  string code = 2;
}

message CompleteVerificationResponse {}

message RetryVerificationRequest {
  string member_id = 1;
  io.token.proto.common.alias.Alias alias = 2;
}

message RetryVerificationResponse {
  string verification_id = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Member account recovery.
//

message BeginRecoveryRequest {
  io.token.proto.common.alias.Alias alias = 1;
}

message BeginRecoveryResponse {
  string verification_id = 1;
}

message CompleteRecoveryRequest {
  string verification_id = 1;
  string code = 2;
  io.token.proto.common.security.Key key = 3;
}

message CompleteRecoveryResponse {
  io.token.proto.common.member.MemberRecoveryOperation recovery_entry = 1;
}

message VerifyAliasRequest {
  string verification_id = 1;
  string code = 2;
}

message VerifyAliasResponse {}

message GetDefaultAgentRequest {}

message GetDefaultAgentResponse {
  string member_id = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Member PII/addresses/preferences management.
//

message AddAddressRequest {
  string name = 1;
  io.token.proto.common.address.Address address = 2;
  io.token.proto.common.security.Signature address_signature = 3;
}

message AddAddressResponse {
  io.token.proto.common.member.AddressRecord address = 1;
}

message GetAddressRequest {
  string address_id = 1;
}

message GetAddressResponse {
  io.token.proto.common.member.AddressRecord address = 1;
}

message GetAddressesRequest {}

message GetAddressesResponse {
  repeated io.token.proto.common.member.AddressRecord addresses = 1;
}

message DeleteAddressRequest {
  string address_id = 1;
}

message DeleteAddressResponse {}

message SetProfileRequest {
  io.token.proto.common.member.Profile profile = 1;
}

message SetProfileResponse {
  io.token.proto.common.member.Profile profile = 1;
}

message GetProfileRequest {
  string member_id = 1;
}

message GetProfileResponse {
  io.token.proto.common.member.Profile profile = 1;
}

message SetProfilePictureRequest {
  io.token.proto.common.blob.Blob.Payload payload = 1;
}

message SetProfilePictureResponse {
}

message GetProfilePictureRequest {
  string member_id = 1;
  io.token.proto.common.member.ProfilePictureSize size = 2;
}

message GetProfilePictureResponse {
  io.token.proto.common.blob.Blob blob = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Notification service
//

message SubscribeToNotificationsRequest {
  string handler = 1; // Who is sending the notification
  map<string, string> handler_instructions = 2;
}

message SubscribeToNotificationsResponse {
  io.token.proto.common.subscriber.Subscriber subscriber = 1;
}

message GetSubscribersRequest {}

message GetSubscribersResponse {
  repeated io.token.proto.common.subscriber.Subscriber subscribers = 1;
}

message GetSubscriberRequest {
  string subscriber_id = 1;
}

message GetSubscriberResponse {
  io.token.proto.common.subscriber.Subscriber subscriber = 1;
}

message UnsubscribeFromNotificationsRequest {
  string subscriber_id = 1;
}

message UnsubscribeFromNotificationsResponse {}

message NotifyRequest {
  io.token.proto.common.alias.Alias alias = 1;
  io.token.proto.common.notification.NotifyBody body = 2;
}

message NotifyResponse {
  io.token.proto.common.notification.NotifyStatus status = 1;
}

message GetNotificationsRequest {
  Page page = 1;
}

message GetNotificationsResponse {
  repeated io.token.proto.common.notification.Notification notifications = 1;
  string offset = 2;
}

message GetNotificationRequest {
  string notification_id = 1;
}

message GetNotificationResponse {
  io.token.proto.common.notification.Notification notification = 1;
}

message RequestTransferRequest {
  io.token.proto.common.token.TokenPayload token_payload = 2;
}

message RequestTransferResponse {
  io.token.proto.common.notification.NotifyStatus status = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Bank account management and information access.
//

message LinkAccountsRequest {
  io.token.proto.banklink.BankAuthorization bankAuthorization = 1;
}

message LinkAccountsResponse {
  repeated io.token.proto.common.account.Account accounts = 1;
}

message UnlinkAccountsRequest {
  repeated string account_ids = 1;
}

message UnlinkAccountsResponse {
}

message GetAccountRequest {
  string account_id = 1;
}

message GetAccountResponse {
  io.token.proto.common.account.Account account = 1;
}

message GetAccountsRequest {
}

message GetAccountsResponse {
  repeated io.token.proto.common.account.Account accounts = 1;
}

message GetBalanceRequest {
  string account_id = 1;
}

message GetBalanceResponse {
  io.token.proto.common.money.Money current = 1;
  io.token.proto.common.money.Money available = 2;
}

message GetTransactionRequest {
  string account_id = 1;
  string transaction_id = 2;
}

message GetTransactionResponse {
  io.token.proto.common.transaction.Transaction transaction = 1;
}

message GetTransactionsRequest {
  string account_id = 1;
  Page page = 2; // Optional paging settings.
}

message GetTransactionsResponse {
  repeated io.token.proto.common.transaction.Transaction transactions = 1;
  string offset = 2; // Optional offset state for the client to roundtrip.
}

message GetDefaultAccountRequest {
  string member_id = 1;
}

message GetDefaultAccountResponse {
  io.token.proto.common.account.Account account = 1;
}

message SetDefaultAccountRequest {
  string member_id = 1;
  string account_id = 2;
}

message SetDefaultAccountResponse {
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Blobs
//

message CreateBlobRequest {
  io.token.proto.common.blob.Blob.Payload payload = 1;
}

message CreateBlobResponse {
  string blob_id = 1;
}

message GetBlobRequest {
  string blob_id = 1;
}

message GetBlobResponse {
  io.token.proto.common.blob.Blob blob = 1;
}

message GetTokenBlobRequest {
  string token_id = 1;
  string blob_id = 2;
}

message GetTokenBlobResponse {
  io.token.proto.common.blob.Blob blob = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Tokens
//

message CreateTransferTokenRequest {
  io.token.proto.common.token.TokenPayload payload = 1;
}

message CreateTransferTokenResponse {
  io.token.proto.common.token.Token token = 1;
  io.token.proto.common.token.TransferTokenStatus status = 2;
  io.token.proto.common.token.ExternalAuthorizationDetails authorization_details = 3;          // Optional: used when status is FAILURE_EXTERNAL_AUTHORIZATION_REQUIRED
}

message CreateAccessTokenRequest {
  io.token.proto.common.token.TokenPayload payload = 1;
}

message CreateAccessTokenResponse {
  io.token.proto.common.token.Token token = 1;
}

message GetTokenRequest {
  string token_id = 1;
}

message GetTokenResponse {
  io.token.proto.common.token.Token token = 1;
}

message GetTokensRequest {
  enum Type {
    INVALID = 0;
    ACCESS = 1;
    TRANSFER = 2;
  }
  Type type = 1;
  Page page = 2; // Optional paging settings.
  TokenFilter filter = 3;

  message TokenFilter {
    string source_account_id = 1;
    string destination_account_id = 2;
    int64 start_time_ms = 3;
    int64 end_time_ms = 4;
    Role role = 5;

    enum Role {
      ANY = 0;
      FROM = 1;
      TO = 2;
    }
  }
}

message GetTokensResponse {
  repeated io.token.proto.common.token.Token tokens = 1;
  string offset = 2; // Optional offset state for the client to roundtrip.
}

message EndorseTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message EndorseTokenResponse {
  io.token.proto.common.token.TokenOperationResult result = 1;
}

message CancelTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message CancelTokenResponse {
  io.token.proto.common.token.TokenOperationResult result = 1;
}

message ReplaceTokenRequest {
  message CancelToken {
    string token_id = 1;
    io.token.proto.common.security.Signature signature = 2;
  }

  message CreateToken {
    io.token.proto.common.token.TokenPayload payload = 1;
    io.token.proto.common.security.Signature payload_signature = 2; // Optional if endorsement requested.
  }

  CancelToken cancel_token = 1;
  CreateToken create_token = 2;
}

message ReplaceTokenResponse {
  io.token.proto.common.token.TokenOperationResult result = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Transfers.
//

message CreateTransferRequest {
  io.token.proto.common.transfer.TransferPayload payload = 1;
  io.token.proto.common.security.Signature payload_signature = 2;
}

message CreateTransferResponse {
  io.token.proto.common.transfer.Transfer transfer = 1;
}

message GetTransferRequest {
  string transfer_id = 1;
}

message GetTransferResponse {
  io.token.proto.common.transfer.Transfer transfer = 1;
}

message GetTransfersRequest {
  string token_id = 1;
  Page page = 2;        // Optional paging settings.
  TransferFilter filter = 3;

  message TransferFilter {
    string token_id = 1;
    int64 start_time_ms = 2;
    int64 end_time_ms = 3;
    io.token.proto.common.transaction.TransactionStatus transaction_status = 4;
    Role role = 5;

    enum Role {
      ANY = 0;
      PAYER = 1;
      PAYEE = 2;
    }
  }
}

message GetTransfersResponse {
  repeated io.token.proto.common.transfer.Transfer transfers = 1;    // List of transfers.
  string offset = 2; // Optional offset state for the client to roundtrip.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Bank Information Endpoints.
//

message GetBanksRequest {
}

message GetBanksResponse {
  repeated io.token.proto.common.bank.Bank banks = 1;
}

message GetBankInfoRequest {
  string bank_id = 1;
}

message GetBankInfoResponse {
  io.token.proto.common.bank.BankInfo info = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Testing API calls
//

message CreateTestBankAccountRequest {
  io.token.proto.common.money.Money balance = 1;
}

message CreateTestBankAccountResponse {
  io.token.proto.banklink.BankAuthorization bankAuthorization = 1;
}

message GetTestBankNotificationRequest {
  string subscriber_id = 1;
  string notification_id = 2;
}

message GetTestBankNotificationResponse {
  io.token.proto.common.notification.Notification notification = 1;
}

message GetTestBankNotificationsRequest {
  string subscriber_id = 1;
}

message GetTestBankNotificationsResponse {
  repeated io.token.proto.common.notification.Notification notifications = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Gateway Service.
//
service GatewayService {
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Member registration, key and alias mamangement.
  //

  rpc CreateMember (CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
        post: "/members"
    };
  }

  rpc UpdateMember (UpdateMemberRequest) returns (UpdateMemberResponse) {
    option (google.api.http) = {
        post: "/members/{update.member_id}/updates"
    };
  }

  rpc GetMember (GetMemberRequest) returns (GetMemberResponse) {
    option (google.api.http) = {
        get: "/members/{member_id}"
    };
  }

  rpc SetProfile (SetProfileRequest) returns (SetProfileResponse) {
    option (google.api.http) = {
        put: "/profile"
    };
  }

  rpc GetProfile (GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http) = {
        get: "/members/{member_id}/profile"
    };
  }

  rpc SetProfilePicture (SetProfilePictureRequest) returns (SetProfilePictureResponse) {
    option (google.api.http) = {
        put: "/profilepicture"
    };
  }

  rpc GetProfilePicture (GetProfilePictureRequest) returns (GetProfilePictureResponse) {
    option (google.api.http) = {
        get: "/members/{member_id}/profilepicture/{size}"
    };
  }

  rpc ResolveAlias (ResolveAliasRequest) returns (ResolveAliasResponse) {
    option (google.api.http) = {
      get: "/resolve-alias?value={alias.value}&type={alias.type}"
    };
  }

  rpc GetAliases (GetAliasesRequest) returns (GetAliasesResponse) {
    option (google.api.http) = {
      get: "/aliases"
    };
  }

  rpc CompleteVerification (CompleteVerificationRequest) returns (CompleteVerificationResponse) {
    option (google.api.http) = {
      get: "/verifications/{verification_id}/complete/{code}"
    };
  }

  rpc RetryVerification (RetryVerificationRequest) returns (RetryVerificationResponse) {
  option (google.api.http) = {
      post: "/verifications"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Member account recovery
  //

  rpc BeginRecovery (BeginRecoveryRequest) returns (BeginRecoveryResponse) {
    option (google.api.http) = {
      post: "/recovery/verifications"
    };
  }

  rpc CompleteRecovery (CompleteRecoveryRequest) returns (CompleteRecoveryResponse) {
    option (google.api.http) = {
      post: "/recovery/verifications/{verification_id}/complete/{code}"
    };
  }

  rpc VerifyAlias (VerifyAliasRequest) returns (VerifyAliasResponse) {
    option (google.api.http) = {
      put: "/verifications/{verification_id}/complete/{code}"
    };
  }

  rpc GetDefaultAgent (GetDefaultAgentRequest) returns (GetDefaultAgentResponse) {
    option (google.api.http) = {
      get: "/recovery/defaults/agent"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Member addresses and preferences
  //

  rpc AddAddress (AddAddressRequest) returns (AddAddressResponse) {
    option (google.api.http) = {
        post: "/addresses"
    };
  }

  rpc GetAddress (GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
        get: "/addresses/{address_id}"
    };
  }

  rpc GetAddresses (GetAddressesRequest) returns (GetAddressesResponse) {
    option (google.api.http) = {
        get: "/addresses"
    };
  }

  rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressResponse) {
    option (google.api.http) = {
        delete: "/addresses/{address_id}"
    };
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Devices for notification service
  //

  rpc SubscribeToNotifications (SubscribeToNotificationsRequest) returns (SubscribeToNotificationsResponse) {
    option (google.api.http) = {
        post: "/subscribers"
    };
  }

  rpc GetSubscribers (GetSubscribersRequest) returns (GetSubscribersResponse) {
    option (google.api.http) = {
        get: "/subscribers"
    };
  }

  rpc GetSubscriber (GetSubscriberRequest) returns (GetSubscriberResponse) {
    option (google.api.http) = {
        get: "/subscribers/{subscriber_id}"
    };
  }

  rpc UnsubscribeFromNotifications (UnsubscribeFromNotificationsRequest) returns (UnsubscribeFromNotificationsResponse) {
    option (google.api.http) = {
        delete: "/subscribers/{subscriber_id}"
    };
  }

  rpc Notify (NotifyRequest) returns (NotifyResponse) {
    option (google.api.http) = {
        post: "/notify"
    };
  }

  rpc GetNotifications (GetNotificationsRequest) returns (GetNotificationsResponse) {
    option (google.api.http) = {
        get: "/notifications?offset={page.offset}&limit={page.limit}"
    };
  }

  rpc GetNotification (GetNotificationRequest) returns (GetNotificationResponse) {
    option (google.api.http) = {
        get: "/notifications/{notification_id}"
    };
  }

  rpc RequestTransfer (RequestTransferRequest) returns (RequestTransferResponse) {
    option (google.api.http) = {
        post: "/request-transfer"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Bank accounts.
  //

  rpc LinkAccounts (LinkAccountsRequest) returns (LinkAccountsResponse) {
    option (google.api.http) = {
        post: "/accounts"
    };
  }

  rpc UnlinkAccounts (UnlinkAccountsRequest) returns (UnlinkAccountsResponse) {
    option (google.api.http) = {
        delete: "/accounts"
    };
  }

  rpc GetAccount (GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}"
    };
  }

  rpc GetAccounts (GetAccountsRequest) returns (GetAccountsResponse) {
    option (google.api.http) = {
        get: "/accounts"
    };
  }

  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/balance"
    };
  }

  rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/transactions/{transaction_id}"
    };
  }

  rpc GetTransactions (GetTransactionsRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/transactions?offset={page.offset}&limit={page.limit}"
    };
  }

  rpc GetDefaultAccount (GetDefaultAccountRequest) returns (GetDefaultAccountResponse) {
    option (google.api.http) = {
      get: "/members/{member_id}/default-account"
    };
  }

  rpc SetDefaultAccount (SetDefaultAccountRequest) returns (SetDefaultAccountResponse) {
    option (google.api.http) = {
      put: "/members/{member_id}/default-account"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Testing.
  //
  rpc CreateTestBankAccount (CreateTestBankAccountRequest) returns (CreateTestBankAccountResponse) {
    option (google.api.http) = {
        post: "/test/create-account"
    };
  }

  rpc GetTestBankNotification (GetTestBankNotificationRequest) returns (GetTestBankNotificationResponse) {
    option (google.api.http) = {
        get: "/test/subscribers/{subscriber_id}/notifications/{notification_id}"
    };
  }

  rpc GetTestBankNotifications (GetTestBankNotificationsRequest) returns (GetTestBankNotificationsResponse) {
    option (google.api.http) = {
        get: "/test/subscribers/{subscriber_id}/notifications"
    };
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Blobs.
  //

  rpc CreateBlob (CreateBlobRequest) returns (CreateBlobResponse) {
    option (google.api.http) = {
        post: "/blobs"
    };
  }

  rpc GetBlob (GetBlobRequest) returns (GetBlobResponse) {
    option (google.api.http) = {
        get: "/blobs/{blob_id}"
    };
  }

  rpc GetTokenBlob (GetTokenBlobRequest) returns (GetTokenBlobResponse) {
    option (google.api.http) = {
        get: "/tokens/{token_id}/blobs/{blob_id}"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Tokens.
  //

  rpc CreateTransferToken (CreateTransferTokenRequest) returns (CreateTransferTokenResponse) {
    option (google.api.http) = {
        post: "/tokens?type=transfer"
    };
  }

  rpc CreateAccessToken (CreateAccessTokenRequest) returns (CreateAccessTokenResponse) {
    option (google.api.http) = {
        post: "/tokens?type=access"
    };
  }

  rpc GetToken (GetTokenRequest) returns (GetTokenResponse) {
    option (google.api.http) = {
        get: "/tokens/{token_id}"
    };
  }

  rpc GetTokens (GetTokensRequest) returns (GetTokensResponse) {
    option (google.api.http) = {
        get: "/tokens?type={type}&offset={page.offset}&limit={page.limit}"
    };
  }

  rpc EndorseToken (EndorseTokenRequest) returns (EndorseTokenResponse) {
    option (google.api.http) = {
        put: "/tokens/{token_id}/endorse"
    };
  }

  rpc CancelToken (CancelTokenRequest) returns (CancelTokenResponse) {
    option (google.api.http) = {
        put: "/tokens/{token_id}/cancel"
    };
  }

  rpc ReplaceToken (ReplaceTokenRequest) returns (ReplaceTokenResponse) {
    option (google.api.http) = {
        post: "/tokens/{cancel_token.token_id}/replace"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Token Transfers.
  //

  rpc CreateTransfer (CreateTransferRequest) returns (CreateTransferResponse) {
    option (google.api.http) = {
        post: "/transfers"
    };
  }

  rpc GetTransfer (GetTransferRequest) returns (GetTransferResponse) {
    option (google.api.http) = {
        get: "/transfers/{transfer_id}"
    };
  }

  rpc GetTransfers (GetTransfersRequest) returns (GetTransfersResponse) {
    option (google.api.http) = {
        get: "/transfers?tokenId={filter.token_id}&offset={page.offset}&limit={page.limit}"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Bank Information Endpoints.
  //

  rpc GetBanks (GetBanksRequest) returns (GetBanksResponse) {
    option (google.api.http) = {
        get: "/banks"
    };
  }

  rpc GetBankInfo (GetBankInfoRequest) returns (GetBankInfoResponse) {
    option (google.api.http) = {
        get: "/banks/{bank_id}/info"
    };
  }
}
