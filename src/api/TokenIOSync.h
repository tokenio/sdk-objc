//
//  Created by Alexey Kalinichenko on 9/13/16.
//  Copyright Â© 2016 Token Inc. All rights reserved.
//

#import "TKTypedef.h"
#import "Security.pbobjc.h"
#import "TokenIO.h"

@class GatewayService;
@class TokenIOBuilder;
@class TKMember;
@class TokenIOAsync;
@class DeviceInfo;
@class TokenPayload;

/**
 * Use this class to create to create a new member using `createMember`
 * method or login an existing member using `loginMember`.
 *
 * <p>
 * The class provides async API with `TokenIO` providing a synchronous version.
 * `TokenIO` instance can be obtained by calling `sync` method.
 * </p>
 */
@interface TokenIO (Sync)

/**
 * Checks if a given username already exists.
 *
 * @param username username to check
 * @return true if username already exists, false otherwise
 */
- (BOOL)usernameExists:(NSString *)username;

/**
 * Looks up member id for a given username.
 *
 * @param username username to check
 * @return member id if username already exists, nil otherwise
 */
- (NSString *)getMemberId:(NSString *)username;

/**
 * Creates a new Token member with a set of auto generated keys and the
 * given username.
 *
 * @param username member username to use, must be unique
 * @return newly created member
 */
- (TKMember *)createMember:(NSString *)username;

/**
 * Provisions a new device for an existing user. The call generates a set
 * of keys that are returned back. The keys need to be approved by an
 * existing device/keys.
 *
 * @param username member id to provision the device for
 * @return device information
 */
- (DeviceInfo *)provisionDevice:(NSString *)username;

/**
 * Logs in an existing member to the system.
 *
 * @param memberId member id
 * @return logged in member
 */
- (TKMember *)loginMember:(NSString *)memberId;

/**
 * Sends a notification to request payment
 *
 * @param username username to notify
 * @param token payload of a token to be sent
 */
- (void)notifyPaymentRequest:(NSString *)username
                       token:(TokenPayload *)token;

/**
 * Sends a notification to request linking of accounts
 *
 * @param username username to notify
 * @param authorization bank authorization, generated by the bank
 */
- (void)notifyLinkAccounts:(NSString *)username
             authorization:(BankAuthorization *)authorization;

/**
 * Sends a notification to request adding of a key
 *
 * @param username username to notify
 * @param key key in string form
 * @param keyName optional name of key
 */
- (void)notifyAddKey:(NSString *)username
             keyName:(NSString *)keyName
                 key:(Key *)key;

/**
 * Sends a notification to request linking of accounts and adding of a key
 *
 * @param username username to notify
 * @param authorization bank authorization, generated by the bank
 * @param key key in string form
 * @param keyName optional name of key
 */
- (void)notifyLinkAccountsAndAddKey:(NSString *)username
                      authorization:authorization
                            keyName:(NSString *)keyName
                                key:(Key *)key;

@end
