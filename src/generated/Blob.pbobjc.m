// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blob.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Blob.pbobjc.h"
#import "extensions/Field.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Blob);
GPBObjCClassDeclaration(Blob_Payload);

#pragma mark - BlobRoot

@implementation BlobRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[FieldRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - BlobRoot_FileDescriptor

static GPBFileDescriptor *BlobRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.blob"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Blob

@implementation Blob

@dynamic id_p;
@dynamic hasPayload, payload;

typedef struct Blob__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  Blob_Payload *payload;
} Blob__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Blob_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Blob__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.clazz = GPBObjCClass(Blob_Payload),
        .number = Blob_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Blob__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Blob class]
                                     rootClass:[BlobRoot class]
                                          file:BlobRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Blob__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Blob_AccessMode

GPBEnumDescriptor *Blob_AccessMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Default\000Public\000";
    static const int32_t values[] = {
        Blob_AccessMode_Default,
        Blob_AccessMode_Public,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Blob_AccessMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Blob_AccessMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Blob_AccessMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Blob_AccessMode_Default:
    case Blob_AccessMode_Public:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Blob_Payload

@implementation Blob_Payload

@dynamic ownerId;
@dynamic type;
@dynamic name;
@dynamic data_p;
@dynamic accessMode;

typedef struct Blob_Payload__storage_ {
  uint32_t _has_storage_[1];
  Blob_AccessMode accessMode;
  NSString *ownerId;
  NSString *type;
  NSString *name;
  NSData *data_p;
} Blob_Payload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = Blob_Payload_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Blob_Payload__storage_, ownerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = Blob_Payload_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Blob_Payload__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Blob_Payload_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Blob_Payload__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Blob_Payload_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Blob_Payload__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "accessMode",
        .dataTypeSpecific.enumDescFunc = Blob_AccessMode_EnumDescriptor,
        .number = Blob_Payload_FieldNumber_AccessMode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Blob_Payload__storage_, accessMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Blob_Payload class]
                                     rootClass:[BlobRoot class]
                                          file:BlobRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Blob_Payload__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Blob)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Blob_Payload_AccessMode_RawValue(Blob_Payload *message) {
  GPBDescriptor *descriptor = [Blob_Payload descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Blob_Payload_FieldNumber_AccessMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetBlob_Payload_AccessMode_RawValue(Blob_Payload *message, int32_t value) {
  GPBDescriptor *descriptor = [Blob_Payload descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Blob_Payload_FieldNumber_AccessMode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Attachment

@implementation Attachment

@dynamic blobId;
@dynamic type;
@dynamic name;

typedef struct Attachment__storage_ {
  uint32_t _has_storage_[1];
  NSString *blobId;
  NSString *type;
  NSString *name;
} Attachment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blobId",
        .dataTypeSpecific.clazz = Nil,
        .number = Attachment_FieldNumber_BlobId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Attachment__storage_, blobId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = Attachment_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Attachment__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Attachment_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Attachment__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Attachment class]
                                     rootClass:[BlobRoot class]
                                          file:BlobRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Attachment__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
