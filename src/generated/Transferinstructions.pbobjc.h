// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transferinstructions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Address;
@class BankAccount;
@class CustomerData;
@class TransferEndpoint;
@class TransferInstructions_Metadata;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PurposeOfPayment

typedef GPB_ENUM(PurposeOfPayment) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PurposeOfPayment_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PurposeOfPayment_Invalid = 0,
  PurposeOfPayment_Other = 1,
  PurposeOfPayment_PersonalExpenses = 2,
  PurposeOfPayment_PurchaseOfShares = 3,
  PurposeOfPayment_TransferToYourOwnAccount = 4,
  PurposeOfPayment_PurchaseOfProperty = 5,
  PurposeOfPayment_FamilyMaintenance = 6,
  PurposeOfPayment_Savings = 7,
};

GPBEnumDescriptor *PurposeOfPayment_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PurposeOfPayment_IsValidValue(int32_t value);

#pragma mark - Enum PaymentContext

typedef GPB_ENUM(PaymentContext) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PaymentContext_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PaymentContext_InvalidContext = 0,
  PaymentContext_OtherContext = 1,
  PaymentContext_BillPayment = 2,
  PaymentContext_EcommerceGoods = 3,
  PaymentContext_EcommerceServices = 4,
  PaymentContext_PersonToPerson = 5,
};

GPBEnumDescriptor *PaymentContext_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PaymentContext_IsValidValue(int32_t value);

#pragma mark - TransferinstructionsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface TransferinstructionsRoot : GPBRootObject
@end

#pragma mark - CustomerData

typedef GPB_ENUM(CustomerData_FieldNumber) {
  CustomerData_FieldNumber_LegalNamesArray = 1,
  CustomerData_FieldNumber_Address = 2,
};

@interface CustomerData : GPBMessage

/** Repeated in case of joint account holders. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *legalNamesArray;
/** The number of items in @c legalNamesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger legalNamesArray_Count;

/** Physical address */
@property(nonatomic, readwrite, strong, null_resettable) Address *address;
/** Test to see if @c address has been set. */
@property(nonatomic, readwrite) BOOL hasAddress;

@end

#pragma mark - TransferEndpoint

typedef GPB_ENUM(TransferEndpoint_FieldNumber) {
  TransferEndpoint_FieldNumber_Account = 1,
  TransferEndpoint_FieldNumber_CustomerData = 2,
};

/**
 * Money transfer source or destination account.
 **/
@interface TransferEndpoint : GPBMessage

/** Account identifier, e.g., SWIFT transfer info */
@property(nonatomic, readwrite, strong, null_resettable) BankAccount *account;
/** Test to see if @c account has been set. */
@property(nonatomic, readwrite) BOOL hasAccount;

/** Customer data: name and address */
@property(nonatomic, readwrite, strong, null_resettable) CustomerData *customerData;
/** Test to see if @c customerData has been set. */
@property(nonatomic, readwrite) BOOL hasCustomerData;

@end

#pragma mark - TransferInstructions

typedef GPB_ENUM(TransferInstructions_FieldNumber) {
  TransferInstructions_FieldNumber_Source = 1,
  TransferInstructions_FieldNumber_DestinationsArray = 2,
  TransferInstructions_FieldNumber_Metadata = 3,
};

/**
 * Money transfer instructions.
 **/
@interface TransferInstructions : GPBMessage

/** Transfer source. */
@property(nonatomic, readwrite, strong, null_resettable) TransferEndpoint *source;
/** Test to see if @c source has been set. */
@property(nonatomic, readwrite) BOOL hasSource;

/** Transfer desitination. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TransferEndpoint*> *destinationsArray;
/** The number of items in @c destinationsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger destinationsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) TransferInstructions_Metadata *metadata;
/** Test to see if @c metadata has been set. */
@property(nonatomic, readwrite) BOOL hasMetadata;

@end

#pragma mark - TransferInstructions_Metadata

typedef GPB_ENUM(TransferInstructions_Metadata_FieldNumber) {
  TransferInstructions_Metadata_FieldNumber_TransferPurpose = 1,
  TransferInstructions_Metadata_FieldNumber_PaymentContext = 2,
  TransferInstructions_Metadata_FieldNumber_MerchantCategoryCode = 3,
  TransferInstructions_Metadata_FieldNumber_MerchantCustomerId = 4,
  TransferInstructions_Metadata_FieldNumber_DeliveryAddress = 5,
};

@interface TransferInstructions_Metadata : GPBMessage

/** Purpose of payment */
@property(nonatomic, readwrite) PurposeOfPayment transferPurpose;

/** Optional payment context */
@property(nonatomic, readwrite) PaymentContext paymentContext;

/** Optional ISO 18245 Merchant Category Code (MCC) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *merchantCategoryCode;

/** Optional Unique merchant customer identifier */
@property(nonatomic, readwrite, copy, null_resettable) NSString *merchantCustomerId;

/** Optional delivery address */
@property(nonatomic, readwrite, strong, null_resettable) Address *deliveryAddress;
/** Test to see if @c deliveryAddress has been set. */
@property(nonatomic, readwrite) BOOL hasDeliveryAddress;

@end

/**
 * Fetches the raw value of a @c TransferInstructions_Metadata's @c transferPurpose property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TransferInstructions_Metadata_TransferPurpose_RawValue(TransferInstructions_Metadata *message);
/**
 * Sets the raw value of an @c TransferInstructions_Metadata's @c transferPurpose property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTransferInstructions_Metadata_TransferPurpose_RawValue(TransferInstructions_Metadata *message, int32_t value);

/**
 * Fetches the raw value of a @c TransferInstructions_Metadata's @c paymentContext property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TransferInstructions_Metadata_PaymentContext_RawValue(TransferInstructions_Metadata *message);
/**
 * Sets the raw value of an @c TransferInstructions_Metadata's @c paymentContext property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTransferInstructions_Metadata_PaymentContext_RawValue(TransferInstructions_Metadata *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
