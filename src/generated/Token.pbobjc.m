// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Token.pbobjc.h"
 #import "Blob.pbobjc.h"
 #import "Money.pbobjc.h"
 #import "Pricing.pbobjc.h"
 #import "Security.pbobjc.h"
 #import "Transfer.pbobjc.h"
 #import "Transferinstructions.pbobjc.h"
 #import "Alias.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - TokenRoot

@implementation TokenRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TokenRoot_FileDescriptor

static GPBFileDescriptor *TokenRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.token"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum TransferTokenStatus

GPBEnumDescriptor *TransferTokenStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Success\000FailureRejected\000FailureI"
        "nsufficientFunds\000FailureInvalidCurrency\000"
        "FailureSourceAccountNotFound\000FailureDest"
        "inationAccountNotFound\000FailureInvalidAmo"
        "unt\000FailureInvalidQuote\000FailureExternalA"
        "uthorizationRequired\000FailureGeneric\000";
    static const int32_t values[] = {
        TransferTokenStatus_Invalid,
        TransferTokenStatus_Success,
        TransferTokenStatus_FailureRejected,
        TransferTokenStatus_FailureInsufficientFunds,
        TransferTokenStatus_FailureInvalidCurrency,
        TransferTokenStatus_FailureSourceAccountNotFound,
        TransferTokenStatus_FailureDestinationAccountNotFound,
        TransferTokenStatus_FailureInvalidAmount,
        TransferTokenStatus_FailureInvalidQuote,
        TransferTokenStatus_FailureExternalAuthorizationRequired,
        TransferTokenStatus_FailureGeneric,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TransferTokenStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TransferTokenStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TransferTokenStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case TransferTokenStatus_Invalid:
    case TransferTokenStatus_Success:
    case TransferTokenStatus_FailureRejected:
    case TransferTokenStatus_FailureInsufficientFunds:
    case TransferTokenStatus_FailureInvalidCurrency:
    case TransferTokenStatus_FailureSourceAccountNotFound:
    case TransferTokenStatus_FailureDestinationAccountNotFound:
    case TransferTokenStatus_FailureInvalidAmount:
    case TransferTokenStatus_FailureInvalidQuote:
    case TransferTokenStatus_FailureExternalAuthorizationRequired:
    case TransferTokenStatus_FailureGeneric:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Token

@implementation Token

@dynamic id_p;
@dynamic hasPayload, payload;
@dynamic payloadSignaturesArray, payloadSignaturesArray_Count;
@dynamic replacedByTokenId;

typedef struct Token__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  TokenPayload *payload;
  NSMutableArray *payloadSignaturesArray;
  NSString *replacedByTokenId;
} Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Token__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenPayload),
        .number = Token_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Token__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payloadSignaturesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenSignature),
        .number = Token_FieldNumber_PayloadSignaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Token__storage_, payloadSignaturesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replacedByTokenId",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_ReplacedByTokenId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Token__storage_, replacedByTokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Token class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Token__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TokenSignature

@implementation TokenSignature

@dynamic action;
@dynamic hasSignature, signature;

typedef struct TokenSignature__storage_ {
  uint32_t _has_storage_[1];
  TokenSignature_Action action;
  Signature *signature;
} TokenSignature__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = TokenSignature_Action_EnumDescriptor,
        .number = TokenSignature_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenSignature__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = TokenSignature_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenSignature__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenSignature class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenSignature__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TokenSignature_Action_RawValue(TokenSignature *message) {
  GPBDescriptor *descriptor = [TokenSignature descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TokenSignature_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetTokenSignature_Action_RawValue(TokenSignature *message, int32_t value) {
  GPBDescriptor *descriptor = [TokenSignature descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TokenSignature_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum TokenSignature_Action

GPBEnumDescriptor *TokenSignature_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Endorsed\000Cancelled\000";
    static const int32_t values[] = {
        TokenSignature_Action_Invalid,
        TokenSignature_Action_Endorsed,
        TokenSignature_Action_Cancelled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TokenSignature_Action)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TokenSignature_Action_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TokenSignature_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case TokenSignature_Action_Invalid:
    case TokenSignature_Action_Endorsed:
    case TokenSignature_Action_Cancelled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TokenMember

@implementation TokenMember

@dynamic id_p;
@dynamic username;
@dynamic hasAlias, alias;

typedef struct TokenMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *username;
  Alias *alias;
} TokenMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TokenMember_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenMember__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = TokenMember_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenMember__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = GPBStringifySymbol(Alias),
        .number = TokenMember_FieldNumber_Alias,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TokenMember__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenMember class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TokenPayload

@implementation TokenPayload

@dynamic bodyOneOfCase;
@dynamic version;
@dynamic refId;
@dynamic hasIssuer, issuer;
@dynamic hasFrom, from;
@dynamic hasTo, to;
@dynamic effectiveAtMs;
@dynamic expiresAtMs;
@dynamic endorseUntilMs;
@dynamic description_p;
@dynamic transfer;
@dynamic access;
@dynamic hasActingAs, actingAs;

typedef struct TokenPayload__storage_ {
  uint32_t _has_storage_[2];
  NSString *version;
  NSString *refId;
  TokenMember *issuer;
  TokenMember *from;
  TokenMember *to;
  NSString *description_p;
  TransferBody *transfer;
  AccessBody *access;
  TokenPayload_ActingAs *actingAs;
  int64_t effectiveAtMs;
  int64_t expiresAtMs;
  int64_t endorseUntilMs;
} TokenPayload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refId",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_FieldNumber_RefId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, refId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "issuer",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = TokenPayload_FieldNumber_Issuer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, issuer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = TokenPayload_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = TokenPayload_FieldNumber_To,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectiveAtMs",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_FieldNumber_EffectiveAtMs,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, effectiveAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expiresAtMs",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_FieldNumber_ExpiresAtMs,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, expiresAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_FieldNumber_Description_p,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transfer",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferBody),
        .number = TokenPayload_FieldNumber_Transfer,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "access",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody),
        .number = TokenPayload_FieldNumber_Access,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, access),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endorseUntilMs",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_FieldNumber_EndorseUntilMs,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, endorseUntilMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "actingAs",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenPayload_ActingAs),
        .number = TokenPayload_FieldNumber_ActingAs,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TokenPayload__storage_, actingAs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenPayload class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenPayload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "body",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TokenPayload_ClearBodyOneOfCase(TokenPayload *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - TokenPayload_ActingAs

@implementation TokenPayload_ActingAs

@dynamic displayName;
@dynamic refId;
@dynamic logoURL;

typedef struct TokenPayload_ActingAs__storage_ {
  uint32_t _has_storage_[1];
  NSString *displayName;
  NSString *refId;
  NSString *logoURL;
} TokenPayload_ActingAs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_ActingAs_FieldNumber_DisplayName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenPayload_ActingAs__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refId",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_ActingAs_FieldNumber_RefId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenPayload_ActingAs__storage_, refId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logoURL",
        .dataTypeSpecific.className = NULL,
        .number = TokenPayload_ActingAs_FieldNumber_LogoURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TokenPayload_ActingAs__storage_, logoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenPayload_ActingAs class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenPayload_ActingAs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TokenPayload)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExternalAuthorizationDetails

@implementation ExternalAuthorizationDetails

@dynamic URL;
@dynamic completionPattern;

typedef struct ExternalAuthorizationDetails__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
  NSString *completionPattern;
} ExternalAuthorizationDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = ExternalAuthorizationDetails_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExternalAuthorizationDetails__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "completionPattern",
        .dataTypeSpecific.className = NULL,
        .number = ExternalAuthorizationDetails_FieldNumber_CompletionPattern,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExternalAuthorizationDetails__storage_, completionPattern),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExternalAuthorizationDetails class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExternalAuthorizationDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferBody

@implementation TransferBody

@dynamic hasRedeemer, redeemer;
@dynamic hasInstructions, instructions;
@dynamic currency;
@dynamic lifetimeAmount;
@dynamic amount;
@dynamic attachmentsArray, attachmentsArray_Count;
@dynamic hasPricing, pricing;

typedef struct TransferBody__storage_ {
  uint32_t _has_storage_[1];
  TokenMember *redeemer;
  TransferInstructions *instructions;
  NSString *currency;
  NSString *lifetimeAmount;
  NSString *amount;
  NSMutableArray *attachmentsArray;
  Pricing *pricing;
} TransferBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redeemer",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = TransferBody_FieldNumber_Redeemer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferBody__storage_, redeemer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "instructions",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferInstructions),
        .number = TransferBody_FieldNumber_Instructions,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferBody__storage_, instructions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = TransferBody_FieldNumber_Currency,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferBody__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lifetimeAmount",
        .dataTypeSpecific.className = NULL,
        .number = TransferBody_FieldNumber_LifetimeAmount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransferBody__storage_, lifetimeAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransferBody_FieldNumber_Amount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransferBody__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attachmentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Attachment),
        .number = TransferBody_FieldNumber_AttachmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferBody__storage_, attachmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pricing",
        .dataTypeSpecific.className = GPBStringifySymbol(Pricing),
        .number = TransferBody_FieldNumber_Pricing,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransferBody__storage_, pricing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferBody class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferBody__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody

@implementation AccessBody

@dynamic resourcesArray, resourcesArray_Count;

typedef struct AccessBody__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resourcesArray;
} AccessBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resourcesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource),
        .number = AccessBody_FieldNumber_ResourcesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AccessBody__storage_, resourcesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessBody__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource

@implementation AccessBody_Resource

@dynamic resourceOneOfCase;
@dynamic allAddresses;
@dynamic allAccounts;
@dynamic allTransactions;
@dynamic allBalances;
@dynamic address;
@dynamic account;
@dynamic transactions;
@dynamic balance;

typedef struct AccessBody_Resource__storage_ {
  uint32_t _has_storage_[2];
  AccessBody_Resource_AllAddresses *allAddresses;
  AccessBody_Resource_AllAccounts *allAccounts;
  AccessBody_Resource_AllAccountTransactions *allTransactions;
  AccessBody_Resource_AllAccountBalances *allBalances;
  AccessBody_Resource_Address *address;
  AccessBody_Resource_Account *account;
  AccessBody_Resource_AccountTransactions *transactions;
  AccessBody_Resource_AccountBalance *balance;
} AccessBody_Resource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allAddresses",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_AllAddresses),
        .number = AccessBody_Resource_FieldNumber_AllAddresses,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, allAddresses),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allAccounts",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_AllAccounts),
        .number = AccessBody_Resource_FieldNumber_AllAccounts,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, allAccounts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allTransactions",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_AllAccountTransactions),
        .number = AccessBody_Resource_FieldNumber_AllTransactions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, allTransactions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allBalances",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_AllAccountBalances),
        .number = AccessBody_Resource_FieldNumber_AllBalances,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, allBalances),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_Address),
        .number = AccessBody_Resource_FieldNumber_Address,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_Account),
        .number = AccessBody_Resource_FieldNumber_Account,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactions",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_AccountTransactions),
        .number = AccessBody_Resource_FieldNumber_Transactions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, transactions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessBody_Resource_AccountBalance),
        .number = AccessBody_Resource_FieldNumber_Balance,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AccessBody_Resource__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessBody_Resource__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "resource",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void AccessBody_Resource_ClearResourceOneOfCase(AccessBody_Resource *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - AccessBody_Resource_AllAddresses

@implementation AccessBody_Resource_AllAddresses


typedef struct AccessBody_Resource_AllAddresses__storage_ {
  uint32_t _has_storage_[1];
} AccessBody_Resource_AllAddresses__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_AllAddresses class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AccessBody_Resource_AllAddresses__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource_Address

@implementation AccessBody_Resource_Address

@dynamic addressId;

typedef struct AccessBody_Resource_Address__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressId;
} AccessBody_Resource_Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressId",
        .dataTypeSpecific.className = NULL,
        .number = AccessBody_Resource_Address_FieldNumber_AddressId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccessBody_Resource_Address__storage_, addressId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_Address class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessBody_Resource_Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource_AllAccounts

@implementation AccessBody_Resource_AllAccounts


typedef struct AccessBody_Resource_AllAccounts__storage_ {
  uint32_t _has_storage_[1];
} AccessBody_Resource_AllAccounts__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_AllAccounts class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AccessBody_Resource_AllAccounts__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource_Account

@implementation AccessBody_Resource_Account

@dynamic accountId;

typedef struct AccessBody_Resource_Account__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} AccessBody_Resource_Account__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = AccessBody_Resource_Account_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccessBody_Resource_Account__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_Account class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessBody_Resource_Account__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource_AllAccountTransactions

@implementation AccessBody_Resource_AllAccountTransactions


typedef struct AccessBody_Resource_AllAccountTransactions__storage_ {
  uint32_t _has_storage_[1];
} AccessBody_Resource_AllAccountTransactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_AllAccountTransactions class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AccessBody_Resource_AllAccountTransactions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource_AccountTransactions

@implementation AccessBody_Resource_AccountTransactions

@dynamic accountId;

typedef struct AccessBody_Resource_AccountTransactions__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} AccessBody_Resource_AccountTransactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = AccessBody_Resource_AccountTransactions_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccessBody_Resource_AccountTransactions__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_AccountTransactions class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessBody_Resource_AccountTransactions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource_AllAccountBalances

@implementation AccessBody_Resource_AllAccountBalances


typedef struct AccessBody_Resource_AllAccountBalances__storage_ {
  uint32_t _has_storage_[1];
} AccessBody_Resource_AllAccountBalances__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_AllAccountBalances class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AccessBody_Resource_AllAccountBalances__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessBody_Resource_AccountBalance

@implementation AccessBody_Resource_AccountBalance

@dynamic accountId;

typedef struct AccessBody_Resource_AccountBalance__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} AccessBody_Resource_AccountBalance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = AccessBody_Resource_AccountBalance_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccessBody_Resource_AccountBalance__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessBody_Resource_AccountBalance class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessBody_Resource_AccountBalance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AccessBody_Resource)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TokenOperationResult

@implementation TokenOperationResult

@dynamic hasToken, token;
@dynamic status;

typedef struct TokenOperationResult__storage_ {
  uint32_t _has_storage_[1];
  TokenOperationResult_Status status;
  Token *token;
} TokenOperationResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = TokenOperationResult_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenOperationResult__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = TokenOperationResult_Status_EnumDescriptor,
        .number = TokenOperationResult_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenOperationResult__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenOperationResult class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenOperationResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TokenOperationResult_Status_RawValue(TokenOperationResult *message) {
  GPBDescriptor *descriptor = [TokenOperationResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TokenOperationResult_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetTokenOperationResult_Status_RawValue(TokenOperationResult *message, int32_t value) {
  GPBDescriptor *descriptor = [TokenOperationResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TokenOperationResult_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum TokenOperationResult_Status

GPBEnumDescriptor *TokenOperationResult_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Success\000MoreSignaturesNeeded\000";
    static const int32_t values[] = {
        TokenOperationResult_Status_Invalid,
        TokenOperationResult_Status_Success,
        TokenOperationResult_Status_MoreSignaturesNeeded,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TokenOperationResult_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TokenOperationResult_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TokenOperationResult_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case TokenOperationResult_Status_Invalid:
    case TokenOperationResult_Status_Success:
    case TokenOperationResult_Status_MoreSignaturesNeeded:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
