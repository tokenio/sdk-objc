// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Transaction.pbobjc.h"
#import "extensions/Field.pbobjc.h"
#import "Member.pbobjc.h"
#import "Money.pbobjc.h"
#import "Security.pbobjc.h"
#import "extensions/Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TransactionRoot

@implementation TransactionRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[FieldRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - TransactionRoot_FileDescriptor

static GPBFileDescriptor *TransactionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.transaction"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum TransactionType

GPBEnumDescriptor *TransactionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidType\000Debit\000Credit\000";
    static const int32_t values[] = {
        TransactionType_InvalidType,
        TransactionType_Debit,
        TransactionType_Credit,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TransactionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TransactionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TransactionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case TransactionType_InvalidType:
    case TransactionType_Debit:
    case TransactionType_Credit:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum TransactionStatus

GPBEnumDescriptor *TransactionStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidStatus\000Pending\000Processing\000Success"
        "\000PendingExternalAuthorization\000FailureCan"
        "celed\000FailureInsufficientFunds\000FailureIn"
        "validCurrency\000FailurePermissionDenied\000Fa"
        "ilureQuoteExpired\000FailureInvalidAmount\000F"
        "ailureInvalidQuote\000FailureExpired\000Failur"
        "eGeneric\000Sent\000Initiated\000";
    static const int32_t values[] = {
        TransactionStatus_InvalidStatus,
        TransactionStatus_Pending,
        TransactionStatus_Processing,
        TransactionStatus_Success,
        TransactionStatus_PendingExternalAuthorization,
        TransactionStatus_FailureCanceled,
        TransactionStatus_FailureInsufficientFunds,
        TransactionStatus_FailureInvalidCurrency,
        TransactionStatus_FailurePermissionDenied,
        TransactionStatus_FailureQuoteExpired,
        TransactionStatus_FailureInvalidAmount,
        TransactionStatus_FailureInvalidQuote,
        TransactionStatus_FailureExpired,
        TransactionStatus_FailureGeneric,
        TransactionStatus_Sent,
        TransactionStatus_Initiated,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TransactionStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TransactionStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TransactionStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case TransactionStatus_InvalidStatus:
    case TransactionStatus_Pending:
    case TransactionStatus_Processing:
    case TransactionStatus_Success:
    case TransactionStatus_PendingExternalAuthorization:
    case TransactionStatus_FailureCanceled:
    case TransactionStatus_FailureInsufficientFunds:
    case TransactionStatus_FailureInvalidCurrency:
    case TransactionStatus_FailurePermissionDenied:
    case TransactionStatus_FailureQuoteExpired:
    case TransactionStatus_FailureInvalidAmount:
    case TransactionStatus_FailureInvalidQuote:
    case TransactionStatus_FailureExpired:
    case TransactionStatus_FailureGeneric:
    case TransactionStatus_Sent:
    case TransactionStatus_Initiated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RequestStatus

GPBEnumDescriptor *RequestStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidRequest\000SuccessfulRequest\000MoreSig"
        "naturesNeeded\000";
    static const int32_t values[] = {
        RequestStatus_InvalidRequest,
        RequestStatus_SuccessfulRequest,
        RequestStatus_MoreSignaturesNeeded,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RequestStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RequestStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RequestStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case RequestStatus_InvalidRequest:
    case RequestStatus_SuccessfulRequest:
    case RequestStatus_MoreSignaturesNeeded:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Transaction

@implementation Transaction

@dynamic id_p;
@dynamic type;
@dynamic status;
@dynamic hasAmount, amount;
@dynamic description_p;
@dynamic tokenId;
@dynamic tokenTransferId;
@dynamic createdAtMs;
@dynamic metadata, metadata_Count;

typedef struct Transaction__storage_ {
  uint32_t _has_storage_[1];
  TransactionType type;
  TransactionStatus status;
  NSString *id_p;
  Money *amount;
  NSString *description_p;
  NSString *tokenId;
  NSString *tokenTransferId;
  NSMutableDictionary *metadata;
  int64_t createdAtMs;
} Transaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transaction__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = TransactionType_EnumDescriptor,
        .number = Transaction_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Transaction__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = TransactionStatus_EnumDescriptor,
        .number = Transaction_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Transaction__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = Transaction_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Transaction__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Transaction__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_TokenId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Transaction__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tokenTransferId",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_TokenTransferId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Transaction__storage_, tokenTransferId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAtMs",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_CreatedAtMs,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Transaction__storage_, createdAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Transaction__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transaction class]
                                     rootClass:[TransactionRoot class]
                                          file:TransactionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Transaction_Type_RawValue(Transaction *message) {
  GPBDescriptor *descriptor = [Transaction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Transaction_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransaction_Type_RawValue(Transaction *message, int32_t value) {
  GPBDescriptor *descriptor = [Transaction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Transaction_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Transaction_Status_RawValue(Transaction *message) {
  GPBDescriptor *descriptor = [Transaction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Transaction_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransaction_Status_RawValue(Transaction *message, int32_t value) {
  GPBDescriptor *descriptor = [Transaction descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Transaction_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Balance

@implementation Balance

@dynamic accountId;
@dynamic hasCurrent, current;
@dynamic hasAvailable, available;
@dynamic updatedAtMs;
@dynamic otherBalancesArray, otherBalancesArray_Count;

typedef struct Balance__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  Money *current;
  Money *available;
  NSMutableArray *otherBalancesArray;
  int64_t updatedAtMs;
} Balance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = Balance_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Balance__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "current",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = Balance_FieldNumber_Current,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Balance__storage_, current),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "available",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = Balance_FieldNumber_Available,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Balance__storage_, available),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAtMs",
        .dataTypeSpecific.className = NULL,
        .number = Balance_FieldNumber_UpdatedAtMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Balance__storage_, updatedAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "otherBalancesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Balance_TypedBalance),
        .number = Balance_FieldNumber_OtherBalancesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Balance__storage_, otherBalancesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Balance class]
                                     rootClass:[TransactionRoot class]
                                          file:TransactionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Balance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Balance_TypedBalance

@implementation Balance_TypedBalance

@dynamic type;
@dynamic hasAmount, amount;
@dynamic updatedAtMs;

typedef struct Balance_TypedBalance__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  Money *amount;
  int64_t updatedAtMs;
} Balance_TypedBalance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = Balance_TypedBalance_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Balance_TypedBalance__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = Balance_TypedBalance_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Balance_TypedBalance__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAtMs",
        .dataTypeSpecific.className = NULL,
        .number = Balance_TypedBalance_FieldNumber_UpdatedAtMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Balance_TypedBalance__storage_, updatedAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Balance_TypedBalance class]
                                     rootClass:[TransactionRoot class]
                                          file:TransactionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Balance_TypedBalance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Balance)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
