// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway/gateway.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gateway/Gateway.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
 #import "Account.pbobjc.h"
 #import "Address.pbobjc.h"
 #import "Bankinfo.pbobjc.h"
 #import "Banklink.pbobjc.h"
 #import "Blob.pbobjc.h"
 #import "Member.pbobjc.h"
 #import "Money.pbobjc.h"
 #import "Notification.pbobjc.h"
 #import "Security.pbobjc.h"
 #import "Subscriber.pbobjc.h"
 #import "Token.pbobjc.h"
 #import "Transaction.pbobjc.h"
 #import "Transfer.pbobjc.h"
 #import "Alias.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - GatewayRoot

@implementation GatewayRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GatewayRoot_FileDescriptor

static GPBFileDescriptor *GatewayRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.gateway"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Page

@implementation Page

@dynamic offset;
@dynamic limit;

typedef struct Page__storage_ {
  uint32_t _has_storage_[1];
  int32_t limit;
  NSString *offset;
} Page__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = Page_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Page__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = Page_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Page__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Page class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Page__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateMemberRequest

@implementation CreateMemberRequest

@dynamic nonce;

typedef struct CreateMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *nonce;
} CreateMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = CreateMemberRequest_FieldNumber_Nonce,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateMemberRequest__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateMemberResponse

@implementation CreateMemberResponse

@dynamic memberId;

typedef struct CreateMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
} CreateMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = CreateMemberResponse_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateMemberResponse__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMemberRequest

@implementation UpdateMemberRequest

@dynamic hasUpdate, update;
@dynamic hasUpdateSignature, updateSignature;
@dynamic metadataArray, metadataArray_Count;

typedef struct UpdateMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MemberUpdate *update;
  Signature *updateSignature;
  NSMutableArray *metadataArray;
} UpdateMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "update",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberUpdate),
        .number = UpdateMemberRequest_FieldNumber_Update,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMemberRequest__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = UpdateMemberRequest_FieldNumber_UpdateSignature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMemberRequest__storage_, updateSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberOperationMetadata),
        .number = UpdateMemberRequest_FieldNumber_MetadataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateMemberRequest__storage_, metadataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMemberResponse

@implementation UpdateMemberResponse

@dynamic hasMember, member;

typedef struct UpdateMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
} UpdateMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(Member),
        .number = UpdateMemberResponse_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMemberResponse__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMemberRequest

@implementation GetMemberRequest

@dynamic memberId;

typedef struct GetMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
} GetMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = GetMemberRequest_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMemberRequest__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMemberResponse

@implementation GetMemberResponse

@dynamic hasMember, member;

typedef struct GetMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
} GetMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(Member),
        .number = GetMemberResponse_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMemberResponse__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResolveAliasRequest

@implementation ResolveAliasRequest

@dynamic hasAlias, alias;

typedef struct ResolveAliasRequest__storage_ {
  uint32_t _has_storage_[1];
  Alias *alias;
} ResolveAliasRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = GPBStringifySymbol(Alias),
        .number = ResolveAliasRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResolveAliasRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResolveAliasRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResolveAliasRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResolveAliasResponse

@implementation ResolveAliasResponse

@dynamic hasMember, member;

typedef struct ResolveAliasResponse__storage_ {
  uint32_t _has_storage_[1];
  TokenMember *member;
} ResolveAliasResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = ResolveAliasResponse_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResolveAliasResponse__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResolveAliasResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResolveAliasResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAliasesRequest

@implementation GetAliasesRequest


typedef struct GetAliasesRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAliasesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAliasesRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAliasesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAliasesResponse

@implementation GetAliasesResponse

@dynamic aliasesArray, aliasesArray_Count;
@dynamic unverifiedAliasesArray, unverifiedAliasesArray_Count;

typedef struct GetAliasesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *aliasesArray;
  NSMutableArray *unverifiedAliasesArray;
} GetAliasesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "aliasesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Alias),
        .number = GetAliasesResponse_FieldNumber_AliasesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAliasesResponse__storage_, aliasesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unverifiedAliasesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Alias),
        .number = GetAliasesResponse_FieldNumber_UnverifiedAliasesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAliasesResponse__storage_, unverifiedAliasesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAliasesResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAliasesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CompleteVerificationRequest

@implementation CompleteVerificationRequest

@dynamic verificationId;
@dynamic code;

typedef struct CompleteVerificationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *verificationId;
  NSString *code;
} CompleteVerificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verificationId",
        .dataTypeSpecific.className = NULL,
        .number = CompleteVerificationRequest_FieldNumber_VerificationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompleteVerificationRequest__storage_, verificationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = CompleteVerificationRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CompleteVerificationRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompleteVerificationRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompleteVerificationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CompleteVerificationResponse

@implementation CompleteVerificationResponse


typedef struct CompleteVerificationResponse__storage_ {
  uint32_t _has_storage_[1];
} CompleteVerificationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompleteVerificationResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(CompleteVerificationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RetryVerificationRequest

@implementation RetryVerificationRequest

@dynamic memberId;
@dynamic hasAlias, alias;

typedef struct RetryVerificationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
  Alias *alias;
} RetryVerificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = RetryVerificationRequest_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RetryVerificationRequest__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = GPBStringifySymbol(Alias),
        .number = RetryVerificationRequest_FieldNumber_Alias,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RetryVerificationRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RetryVerificationRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RetryVerificationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RetryVerificationResponse

@implementation RetryVerificationResponse

@dynamic verificationId;

typedef struct RetryVerificationResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *verificationId;
} RetryVerificationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verificationId",
        .dataTypeSpecific.className = NULL,
        .number = RetryVerificationResponse_FieldNumber_VerificationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RetryVerificationResponse__storage_, verificationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RetryVerificationResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RetryVerificationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPairedDevicesRequest

@implementation GetPairedDevicesRequest


typedef struct GetPairedDevicesRequest__storage_ {
  uint32_t _has_storage_[1];
} GetPairedDevicesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPairedDevicesRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetPairedDevicesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPairedDevicesResponse

@implementation GetPairedDevicesResponse

@dynamic devicesArray, devicesArray_Count;

typedef struct GetPairedDevicesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *devicesArray;
} GetPairedDevicesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "devicesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Device),
        .number = GetPairedDevicesResponse_FieldNumber_DevicesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPairedDevicesResponse__storage_, devicesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPairedDevicesResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPairedDevicesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BeginRecoveryRequest

@implementation BeginRecoveryRequest

@dynamic hasAlias, alias;

typedef struct BeginRecoveryRequest__storage_ {
  uint32_t _has_storage_[1];
  Alias *alias;
} BeginRecoveryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = GPBStringifySymbol(Alias),
        .number = BeginRecoveryRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BeginRecoveryRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BeginRecoveryRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BeginRecoveryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BeginRecoveryResponse

@implementation BeginRecoveryResponse

@dynamic verificationId;

typedef struct BeginRecoveryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *verificationId;
} BeginRecoveryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verificationId",
        .dataTypeSpecific.className = NULL,
        .number = BeginRecoveryResponse_FieldNumber_VerificationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BeginRecoveryResponse__storage_, verificationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BeginRecoveryResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BeginRecoveryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CompleteRecoveryRequest

@implementation CompleteRecoveryRequest

@dynamic verificationId;
@dynamic code;
@dynamic hasKey, key;

typedef struct CompleteRecoveryRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *verificationId;
  NSString *code;
  Key *key;
} CompleteRecoveryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verificationId",
        .dataTypeSpecific.className = NULL,
        .number = CompleteRecoveryRequest_FieldNumber_VerificationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompleteRecoveryRequest__storage_, verificationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = CompleteRecoveryRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CompleteRecoveryRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = GPBStringifySymbol(Key),
        .number = CompleteRecoveryRequest_FieldNumber_Key,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CompleteRecoveryRequest__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompleteRecoveryRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompleteRecoveryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CompleteRecoveryResponse

@implementation CompleteRecoveryResponse

@dynamic hasRecoveryEntry, recoveryEntry;

typedef struct CompleteRecoveryResponse__storage_ {
  uint32_t _has_storage_[1];
  MemberRecoveryOperation *recoveryEntry;
} CompleteRecoveryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recoveryEntry",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberRecoveryOperation),
        .number = CompleteRecoveryResponse_FieldNumber_RecoveryEntry,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompleteRecoveryResponse__storage_, recoveryEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompleteRecoveryResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompleteRecoveryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyAliasRequest

@implementation VerifyAliasRequest

@dynamic verificationId;
@dynamic code;

typedef struct VerifyAliasRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *verificationId;
  NSString *code;
} VerifyAliasRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verificationId",
        .dataTypeSpecific.className = NULL,
        .number = VerifyAliasRequest_FieldNumber_VerificationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyAliasRequest__storage_, verificationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = VerifyAliasRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyAliasRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyAliasRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyAliasRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyAliasResponse

@implementation VerifyAliasResponse


typedef struct VerifyAliasResponse__storage_ {
  uint32_t _has_storage_[1];
} VerifyAliasResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyAliasResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(VerifyAliasResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDefaultAgentRequest

@implementation GetDefaultAgentRequest


typedef struct GetDefaultAgentRequest__storage_ {
  uint32_t _has_storage_[1];
} GetDefaultAgentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDefaultAgentRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetDefaultAgentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDefaultAgentResponse

@implementation GetDefaultAgentResponse

@dynamic memberId;

typedef struct GetDefaultAgentResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
} GetDefaultAgentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = GetDefaultAgentResponse_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDefaultAgentResponse__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDefaultAgentResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDefaultAgentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddAddressRequest

@implementation AddAddressRequest

@dynamic name;
@dynamic hasAddress, address;
@dynamic hasAddressSignature, addressSignature;

typedef struct AddAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  Address *address;
  Signature *addressSignature;
} AddAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddAddressRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = AddAddressRequest_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addressSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = AddAddressRequest_FieldNumber_AddressSignature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, addressSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddAddressRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddAddressResponse

@implementation AddAddressResponse

@dynamic hasAddress, address;

typedef struct AddAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  AddressRecord *address;
} AddAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(AddressRecord),
        .number = AddAddressResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddAddressResponse__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddAddressResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressRequest

@implementation GetAddressRequest

@dynamic addressId;

typedef struct GetAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressId;
} GetAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressId",
        .dataTypeSpecific.className = NULL,
        .number = GetAddressRequest_FieldNumber_AddressId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressRequest__storage_, addressId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressResponse

@implementation GetAddressResponse

@dynamic hasAddress, address;

typedef struct GetAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  AddressRecord *address;
} GetAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(AddressRecord),
        .number = GetAddressResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressResponse__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressesRequest

@implementation GetAddressesRequest


typedef struct GetAddressesRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAddressesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressesRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAddressesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressesResponse

@implementation GetAddressesResponse

@dynamic addressesArray, addressesArray_Count;

typedef struct GetAddressesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addressesArray;
} GetAddressesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AddressRecord),
        .number = GetAddressesResponse_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAddressesResponse__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressesResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteAddressRequest

@implementation DeleteAddressRequest

@dynamic addressId;

typedef struct DeleteAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressId;
} DeleteAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressId",
        .dataTypeSpecific.className = NULL,
        .number = DeleteAddressRequest_FieldNumber_AddressId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteAddressRequest__storage_, addressId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteAddressRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteAddressResponse

@implementation DeleteAddressResponse


typedef struct DeleteAddressResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteAddressResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetProfileRequest

@implementation SetProfileRequest

@dynamic hasProfile, profile;

typedef struct SetProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  Profile *profile;
} SetProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "profile",
        .dataTypeSpecific.className = GPBStringifySymbol(Profile),
        .number = SetProfileRequest_FieldNumber_Profile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetProfileRequest__storage_, profile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetProfileRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetProfileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetProfileResponse

@implementation SetProfileResponse

@dynamic hasProfile, profile;

typedef struct SetProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  Profile *profile;
} SetProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "profile",
        .dataTypeSpecific.className = GPBStringifySymbol(Profile),
        .number = SetProfileResponse_FieldNumber_Profile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetProfileResponse__storage_, profile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetProfileResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfileRequest

@implementation GetProfileRequest

@dynamic memberId;

typedef struct GetProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
} GetProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = GetProfileRequest_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfileRequest__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfileRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfileResponse

@implementation GetProfileResponse

@dynamic hasProfile, profile;

typedef struct GetProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  Profile *profile;
} GetProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "profile",
        .dataTypeSpecific.className = GPBStringifySymbol(Profile),
        .number = GetProfileResponse_FieldNumber_Profile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfileResponse__storage_, profile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfileResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetProfilePictureRequest

@implementation SetProfilePictureRequest

@dynamic hasPayload, payload;

typedef struct SetProfilePictureRequest__storage_ {
  uint32_t _has_storage_[1];
  Blob_Payload *payload;
} SetProfilePictureRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(Blob_Payload),
        .number = SetProfilePictureRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetProfilePictureRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetProfilePictureRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetProfilePictureRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetProfilePictureResponse

@implementation SetProfilePictureResponse


typedef struct SetProfilePictureResponse__storage_ {
  uint32_t _has_storage_[1];
} SetProfilePictureResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetProfilePictureResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SetProfilePictureResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfilePictureRequest

@implementation GetProfilePictureRequest

@dynamic memberId;
@dynamic size;

typedef struct GetProfilePictureRequest__storage_ {
  uint32_t _has_storage_[1];
  ProfilePictureSize size;
  NSString *memberId;
} GetProfilePictureRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = GetProfilePictureRequest_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfilePictureRequest__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.enumDescFunc = ProfilePictureSize_EnumDescriptor,
        .number = GetProfilePictureRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProfilePictureRequest__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfilePictureRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfilePictureRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetProfilePictureRequest_Size_RawValue(GetProfilePictureRequest *message) {
  GPBDescriptor *descriptor = [GetProfilePictureRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetProfilePictureRequest_FieldNumber_Size];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetProfilePictureRequest_Size_RawValue(GetProfilePictureRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetProfilePictureRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetProfilePictureRequest_FieldNumber_Size];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetProfilePictureResponse

@implementation GetProfilePictureResponse

@dynamic hasBlob, blob;

typedef struct GetProfilePictureResponse__storage_ {
  uint32_t _has_storage_[1];
  Blob *blob;
} GetProfilePictureResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blob",
        .dataTypeSpecific.className = GPBStringifySymbol(Blob),
        .number = GetProfilePictureResponse_FieldNumber_Blob,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfilePictureResponse__storage_, blob),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfilePictureResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfilePictureResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeToNotificationsRequest

@implementation SubscribeToNotificationsRequest

@dynamic handler;
@dynamic handlerInstructions, handlerInstructions_Count;

typedef struct SubscribeToNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *handler;
  NSMutableDictionary *handlerInstructions;
} SubscribeToNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handler",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeToNotificationsRequest_FieldNumber_Handler,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeToNotificationsRequest__storage_, handler),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "handlerInstructions",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeToNotificationsRequest_FieldNumber_HandlerInstructions,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SubscribeToNotificationsRequest__storage_, handlerInstructions),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeToNotificationsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeToNotificationsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeToNotificationsResponse

@implementation SubscribeToNotificationsResponse

@dynamic hasSubscriber, subscriber;

typedef struct SubscribeToNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
  Subscriber *subscriber;
} SubscribeToNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriber",
        .dataTypeSpecific.className = GPBStringifySymbol(Subscriber),
        .number = SubscribeToNotificationsResponse_FieldNumber_Subscriber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeToNotificationsResponse__storage_, subscriber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeToNotificationsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeToNotificationsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscribersRequest

@implementation GetSubscribersRequest


typedef struct GetSubscribersRequest__storage_ {
  uint32_t _has_storage_[1];
} GetSubscribersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscribersRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetSubscribersRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscribersResponse

@implementation GetSubscribersResponse

@dynamic subscribersArray, subscribersArray_Count;

typedef struct GetSubscribersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *subscribersArray;
} GetSubscribersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscribersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Subscriber),
        .number = GetSubscribersResponse_FieldNumber_SubscribersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSubscribersResponse__storage_, subscribersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscribersResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSubscribersResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscriberRequest

@implementation GetSubscriberRequest

@dynamic subscriberId;

typedef struct GetSubscriberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
} GetSubscriberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = GetSubscriberRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSubscriberRequest__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscriberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSubscriberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscriberResponse

@implementation GetSubscriberResponse

@dynamic hasSubscriber, subscriber;

typedef struct GetSubscriberResponse__storage_ {
  uint32_t _has_storage_[1];
  Subscriber *subscriber;
} GetSubscriberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriber",
        .dataTypeSpecific.className = GPBStringifySymbol(Subscriber),
        .number = GetSubscriberResponse_FieldNumber_Subscriber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSubscriberResponse__storage_, subscriber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscriberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSubscriberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnsubscribeFromNotificationsRequest

@implementation UnsubscribeFromNotificationsRequest

@dynamic subscriberId;

typedef struct UnsubscribeFromNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
} UnsubscribeFromNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = UnsubscribeFromNotificationsRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnsubscribeFromNotificationsRequest__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnsubscribeFromNotificationsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnsubscribeFromNotificationsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnsubscribeFromNotificationsResponse

@implementation UnsubscribeFromNotificationsResponse


typedef struct UnsubscribeFromNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
} UnsubscribeFromNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnsubscribeFromNotificationsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UnsubscribeFromNotificationsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyRequest

@implementation NotifyRequest

@dynamic hasAlias, alias;
@dynamic hasBody, body;

typedef struct NotifyRequest__storage_ {
  uint32_t _has_storage_[1];
  Alias *alias;
  NotifyBody *body;
} NotifyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = GPBStringifySymbol(Alias),
        .number = NotifyRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyBody),
        .number = NotifyRequest_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyRequest__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyResponse

@implementation NotifyResponse

@dynamic status;

typedef struct NotifyResponse__storage_ {
  uint32_t _has_storage_[1];
  NotifyStatus status;
} NotifyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = NotifyStatus_EnumDescriptor,
        .number = NotifyResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NotifyResponse_Status_RawValue(NotifyResponse *message) {
  GPBDescriptor *descriptor = [NotifyResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NotifyResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetNotifyResponse_Status_RawValue(NotifyResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [NotifyResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NotifyResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetNotificationsRequest

@implementation GetNotificationsRequest

@dynamic hasPage, page;

typedef struct GetNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  Page *page;
} GetNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = GetNotificationsRequest_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNotificationsRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNotificationsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNotificationsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNotificationsResponse

@implementation GetNotificationsResponse

@dynamic notificationsArray, notificationsArray_Count;
@dynamic offset;

typedef struct GetNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *notificationsArray;
  NSString *offset;
} GetNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notificationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Notification),
        .number = GetNotificationsResponse_FieldNumber_NotificationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetNotificationsResponse__storage_, notificationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetNotificationsResponse_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNotificationsResponse__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNotificationsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNotificationsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNotificationRequest

@implementation GetNotificationRequest

@dynamic notificationId;

typedef struct GetNotificationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *notificationId;
} GetNotificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notificationId",
        .dataTypeSpecific.className = NULL,
        .number = GetNotificationRequest_FieldNumber_NotificationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNotificationRequest__storage_, notificationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNotificationRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNotificationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNotificationResponse

@implementation GetNotificationResponse

@dynamic hasNotification, notification;

typedef struct GetNotificationResponse__storage_ {
  uint32_t _has_storage_[1];
  Notification *notification;
} GetNotificationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notification",
        .dataTypeSpecific.className = GPBStringifySymbol(Notification),
        .number = GetNotificationResponse_FieldNumber_Notification,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNotificationResponse__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNotificationResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNotificationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestTransferRequest

@implementation RequestTransferRequest

@dynamic hasTokenPayload, tokenPayload;

typedef struct RequestTransferRequest__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *tokenPayload;
} RequestTransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenPayload",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenPayload),
        .number = RequestTransferRequest_FieldNumber_TokenPayload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestTransferRequest__storage_, tokenPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestTransferRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestTransferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestTransferResponse

@implementation RequestTransferResponse

@dynamic status;

typedef struct RequestTransferResponse__storage_ {
  uint32_t _has_storage_[1];
  NotifyStatus status;
} RequestTransferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = NotifyStatus_EnumDescriptor,
        .number = RequestTransferResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestTransferResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestTransferResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestTransferResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RequestTransferResponse_Status_RawValue(RequestTransferResponse *message) {
  GPBDescriptor *descriptor = [RequestTransferResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestTransferResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequestTransferResponse_Status_RawValue(RequestTransferResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RequestTransferResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RequestTransferResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - TriggerStepUpNotificationRequest

@implementation TriggerStepUpNotificationRequest

@dynamic stepUpTypeOneOfCase;
@dynamic tokenStepUp;
@dynamic balanceStepUp;
@dynamic transactionStepUp;

typedef struct TriggerStepUpNotificationRequest__storage_ {
  uint32_t _has_storage_[2];
  StepUp *tokenStepUp;
  BalanceStepUp *balanceStepUp;
  TransactionStepUp *transactionStepUp;
} TriggerStepUpNotificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenStepUp",
        .dataTypeSpecific.className = GPBStringifySymbol(StepUp),
        .number = TriggerStepUpNotificationRequest_FieldNumber_TokenStepUp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TriggerStepUpNotificationRequest__storage_, tokenStepUp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "balanceStepUp",
        .dataTypeSpecific.className = GPBStringifySymbol(BalanceStepUp),
        .number = TriggerStepUpNotificationRequest_FieldNumber_BalanceStepUp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TriggerStepUpNotificationRequest__storage_, balanceStepUp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionStepUp",
        .dataTypeSpecific.className = GPBStringifySymbol(TransactionStepUp),
        .number = TriggerStepUpNotificationRequest_FieldNumber_TransactionStepUp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TriggerStepUpNotificationRequest__storage_, transactionStepUp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TriggerStepUpNotificationRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TriggerStepUpNotificationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "stepUpType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TriggerStepUpNotificationRequest_ClearStepUpTypeOneOfCase(TriggerStepUpNotificationRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - TriggerStepUpNotificationResponse

@implementation TriggerStepUpNotificationResponse

@dynamic status;

typedef struct TriggerStepUpNotificationResponse__storage_ {
  uint32_t _has_storage_[1];
  NotifyStatus status;
} TriggerStepUpNotificationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = NotifyStatus_EnumDescriptor,
        .number = TriggerStepUpNotificationResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TriggerStepUpNotificationResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TriggerStepUpNotificationResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TriggerStepUpNotificationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TriggerStepUpNotificationResponse_Status_RawValue(TriggerStepUpNotificationResponse *message) {
  GPBDescriptor *descriptor = [TriggerStepUpNotificationResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TriggerStepUpNotificationResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetTriggerStepUpNotificationResponse_Status_RawValue(TriggerStepUpNotificationResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TriggerStepUpNotificationResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TriggerStepUpNotificationResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LinkAccountsRequest

@implementation LinkAccountsRequest

@dynamic hasBankAuthorization, bankAuthorization;

typedef struct LinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  BankAuthorization *bankAuthorization;
} LinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankAuthorization",
        .dataTypeSpecific.className = GPBStringifySymbol(BankAuthorization),
        .number = LinkAccountsRequest_FieldNumber_BankAuthorization,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkAccountsRequest__storage_, bankAuthorization),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccountsResponse

@implementation LinkAccountsResponse

@dynamic accountsArray, accountsArray_Count;

typedef struct LinkAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountsArray;
} LinkAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = LinkAccountsResponse_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LinkAccountsResponse__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnlinkAccountsRequest

@implementation UnlinkAccountsRequest

@dynamic accountIdsArray, accountIdsArray_Count;

typedef struct UnlinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountIdsArray;
} UnlinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = UnlinkAccountsRequest_FieldNumber_AccountIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UnlinkAccountsRequest__storage_, accountIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnlinkAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnlinkAccountsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnlinkAccountsResponse

@implementation UnlinkAccountsResponse


typedef struct UnlinkAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
} UnlinkAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnlinkAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UnlinkAccountsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountRequest

@implementation GetAccountRequest

@dynamic accountId;

typedef struct GetAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} GetAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetAccountRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccountRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountResponse

@implementation GetAccountResponse

@dynamic hasAccount, account;

typedef struct GetAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  Account *account;
} GetAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = GetAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountsRequest

@implementation GetAccountsRequest


typedef struct GetAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAccountsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountsResponse

@implementation GetAccountsResponse

@dynamic accountsArray, accountsArray_Count;

typedef struct GetAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountsArray;
} GetAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = GetAccountsResponse_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAccountsResponse__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceRequest

@implementation GetBalanceRequest

@dynamic accountId;

typedef struct GetBalanceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} GetBalanceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetBalanceRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceResponse

@implementation GetBalanceResponse

@dynamic hasBalance, balance;
@dynamic status;

typedef struct GetBalanceResponse__storage_ {
  uint32_t _has_storage_[1];
  RequestStatus status;
  Balance *balance;
} GetBalanceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "balance",
        .dataTypeSpecific.className = GPBStringifySymbol(Balance),
        .number = GetBalanceResponse_FieldNumber_Balance,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = RequestStatus_EnumDescriptor,
        .number = GetBalanceResponse_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetBalanceResponse_Status_RawValue(GetBalanceResponse *message) {
  GPBDescriptor *descriptor = [GetBalanceResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetBalanceResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetBalanceResponse_Status_RawValue(GetBalanceResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetBalanceResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetBalanceResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetBalancesRequest

@implementation GetBalancesRequest

@dynamic accountIdArray, accountIdArray_Count;

typedef struct GetBalancesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountIdArray;
} GetBalancesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountIdArray",
        .dataTypeSpecific.className = NULL,
        .number = GetBalancesRequest_FieldNumber_AccountIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetBalancesRequest__storage_, accountIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalancesRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalancesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalancesResponse

@implementation GetBalancesResponse

@dynamic responseArray, responseArray_Count;

typedef struct GetBalancesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *responseArray;
} GetBalancesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GetBalanceResponse),
        .number = GetBalancesResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetBalancesResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalancesResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalancesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionRequest

@implementation GetTransactionRequest

@dynamic accountId;
@dynamic transactionId;

typedef struct GetTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *transactionId;
} GetTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_TransactionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionResponse

@implementation GetTransactionResponse

@dynamic hasTransaction, transaction;
@dynamic status;

typedef struct GetTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  RequestStatus status;
  Transaction *transaction;
} GetTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionResponse_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionResponse__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = RequestStatus_EnumDescriptor,
        .number = GetTransactionResponse_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetTransactionResponse_Status_RawValue(GetTransactionResponse *message) {
  GPBDescriptor *descriptor = [GetTransactionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransactionResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetTransactionResponse_Status_RawValue(GetTransactionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetTransactionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransactionResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetTransactionsRequest

@implementation GetTransactionsRequest

@dynamic accountId;
@dynamic hasPage, page;

typedef struct GetTransactionsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  Page *page;
} GetTransactionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = GetTransactionsRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionsResponse

@implementation GetTransactionsResponse

@dynamic transactionsArray, transactionsArray_Count;
@dynamic offset;
@dynamic status;

typedef struct GetTransactionsResponse__storage_ {
  uint32_t _has_storage_[1];
  RequestStatus status;
  NSMutableArray *transactionsArray;
  NSString *offset;
} GetTransactionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionsResponse_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransactionsResponse__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsResponse_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionsResponse__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = RequestStatus_EnumDescriptor,
        .number = GetTransactionsResponse_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionsResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetTransactionsResponse_Status_RawValue(GetTransactionsResponse *message) {
  GPBDescriptor *descriptor = [GetTransactionsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransactionsResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetTransactionsResponse_Status_RawValue(GetTransactionsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetTransactionsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransactionsResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetDefaultAccountRequest

@implementation GetDefaultAccountRequest

@dynamic memberId;

typedef struct GetDefaultAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
} GetDefaultAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = GetDefaultAccountRequest_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDefaultAccountRequest__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDefaultAccountRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDefaultAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDefaultAccountResponse

@implementation GetDefaultAccountResponse

@dynamic hasAccount, account;

typedef struct GetDefaultAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  Account *account;
} GetDefaultAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = GetDefaultAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDefaultAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDefaultAccountResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDefaultAccountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetDefaultAccountRequest

@implementation SetDefaultAccountRequest

@dynamic memberId;
@dynamic accountId;

typedef struct SetDefaultAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
  NSString *accountId;
} SetDefaultAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = SetDefaultAccountRequest_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetDefaultAccountRequest__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = SetDefaultAccountRequest_FieldNumber_AccountId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetDefaultAccountRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetDefaultAccountRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetDefaultAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetDefaultAccountResponse

@implementation SetDefaultAccountResponse


typedef struct SetDefaultAccountResponse__storage_ {
  uint32_t _has_storage_[1];
} SetDefaultAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetDefaultAccountResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SetDefaultAccountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateBlobRequest

@implementation CreateBlobRequest

@dynamic hasPayload, payload;

typedef struct CreateBlobRequest__storage_ {
  uint32_t _has_storage_[1];
  Blob_Payload *payload;
} CreateBlobRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(Blob_Payload),
        .number = CreateBlobRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateBlobRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateBlobRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateBlobRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateBlobResponse

@implementation CreateBlobResponse

@dynamic blobId;

typedef struct CreateBlobResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *blobId;
} CreateBlobResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blobId",
        .dataTypeSpecific.className = NULL,
        .number = CreateBlobResponse_FieldNumber_BlobId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateBlobResponse__storage_, blobId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateBlobResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateBlobResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBlobRequest

@implementation GetBlobRequest

@dynamic blobId;

typedef struct GetBlobRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *blobId;
} GetBlobRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blobId",
        .dataTypeSpecific.className = NULL,
        .number = GetBlobRequest_FieldNumber_BlobId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBlobRequest__storage_, blobId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBlobRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBlobRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBlobResponse

@implementation GetBlobResponse

@dynamic hasBlob, blob;

typedef struct GetBlobResponse__storage_ {
  uint32_t _has_storage_[1];
  Blob *blob;
} GetBlobResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blob",
        .dataTypeSpecific.className = GPBStringifySymbol(Blob),
        .number = GetBlobResponse_FieldNumber_Blob,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBlobResponse__storage_, blob),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBlobResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBlobResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokenBlobRequest

@implementation GetTokenBlobRequest

@dynamic tokenId;
@dynamic blobId;

typedef struct GetTokenBlobRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  NSString *blobId;
} GetTokenBlobRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetTokenBlobRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokenBlobRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blobId",
        .dataTypeSpecific.className = NULL,
        .number = GetTokenBlobRequest_FieldNumber_BlobId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTokenBlobRequest__storage_, blobId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokenBlobRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokenBlobRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokenBlobResponse

@implementation GetTokenBlobResponse

@dynamic hasBlob, blob;

typedef struct GetTokenBlobResponse__storage_ {
  uint32_t _has_storage_[1];
  Blob *blob;
} GetTokenBlobResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blob",
        .dataTypeSpecific.className = GPBStringifySymbol(Blob),
        .number = GetTokenBlobResponse_FieldNumber_Blob,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokenBlobResponse__storage_, blob),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokenBlobResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokenBlobResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTransferTokenRequest

@implementation CreateTransferTokenRequest

@dynamic hasPayload, payload;

typedef struct CreateTransferTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *payload;
} CreateTransferTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenPayload),
        .number = CreateTransferTokenRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTransferTokenRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTransferTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTransferTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTransferTokenResponse

@implementation CreateTransferTokenResponse

@dynamic hasToken, token;
@dynamic status;
@dynamic hasAuthorizationDetails, authorizationDetails;

typedef struct CreateTransferTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  TransferTokenStatus status;
  Token *token;
  ExternalAuthorizationDetails *authorizationDetails;
} CreateTransferTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = CreateTransferTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTransferTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = TransferTokenStatus_EnumDescriptor,
        .number = CreateTransferTokenResponse_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateTransferTokenResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "authorizationDetails",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalAuthorizationDetails),
        .number = CreateTransferTokenResponse_FieldNumber_AuthorizationDetails,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateTransferTokenResponse__storage_, authorizationDetails),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTransferTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTransferTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CreateTransferTokenResponse_Status_RawValue(CreateTransferTokenResponse *message) {
  GPBDescriptor *descriptor = [CreateTransferTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateTransferTokenResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetCreateTransferTokenResponse_Status_RawValue(CreateTransferTokenResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [CreateTransferTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateTransferTokenResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CreateAccessTokenRequest

@implementation CreateAccessTokenRequest

@dynamic hasPayload, payload;

typedef struct CreateAccessTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *payload;
} CreateAccessTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenPayload),
        .number = CreateAccessTokenRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateAccessTokenRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateAccessTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateAccessTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateAccessTokenResponse

@implementation CreateAccessTokenResponse

@dynamic hasToken, token;

typedef struct CreateAccessTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Token *token;
} CreateAccessTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = CreateAccessTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateAccessTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateAccessTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateAccessTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokenRequest

@implementation GetTokenRequest

@dynamic tokenId;

typedef struct GetTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
} GetTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokenResponse

@implementation GetTokenResponse

@dynamic hasToken, token;

typedef struct GetTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Token *token;
} GetTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = GetTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokensRequest

@implementation GetTokensRequest

@dynamic type;
@dynamic hasPage, page;
@dynamic hasFilter, filter;

typedef struct GetTokensRequest__storage_ {
  uint32_t _has_storage_[1];
  GetTokensRequest_Type type;
  Page *page;
  GetTokensRequest_TokenFilter *filter;
} GetTokensRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GetTokensRequest_Type_EnumDescriptor,
        .number = GetTokensRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokensRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = GetTokensRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTokensRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "filter",
        .dataTypeSpecific.className = GPBStringifySymbol(GetTokensRequest_TokenFilter),
        .number = GetTokensRequest_FieldNumber_Filter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTokensRequest__storage_, filter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokensRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokensRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetTokensRequest_Type_RawValue(GetTokensRequest *message) {
  GPBDescriptor *descriptor = [GetTokensRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTokensRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetTokensRequest_Type_RawValue(GetTokensRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetTokensRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTokensRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GetTokensRequest_Type

GPBEnumDescriptor *GetTokensRequest_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Access\000Transfer\000";
    static const int32_t values[] = {
        GetTokensRequest_Type_Invalid,
        GetTokensRequest_Type_Access,
        GetTokensRequest_Type_Transfer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GetTokensRequest_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GetTokensRequest_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GetTokensRequest_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case GetTokensRequest_Type_Invalid:
    case GetTokensRequest_Type_Access:
    case GetTokensRequest_Type_Transfer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetTokensRequest_TokenFilter

@implementation GetTokensRequest_TokenFilter

@dynamic sourceAccountId;
@dynamic destinationAccountId;
@dynamic startTimeMs;
@dynamic endTimeMs;
@dynamic role;

typedef struct GetTokensRequest_TokenFilter__storage_ {
  uint32_t _has_storage_[1];
  GetTokensRequest_TokenFilter_Role role;
  NSString *sourceAccountId;
  NSString *destinationAccountId;
  int64_t startTimeMs;
  int64_t endTimeMs;
} GetTokensRequest_TokenFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceAccountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTokensRequest_TokenFilter_FieldNumber_SourceAccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokensRequest_TokenFilter__storage_, sourceAccountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "destinationAccountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTokensRequest_TokenFilter_FieldNumber_DestinationAccountId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTokensRequest_TokenFilter__storage_, destinationAccountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTimeMs",
        .dataTypeSpecific.className = NULL,
        .number = GetTokensRequest_TokenFilter_FieldNumber_StartTimeMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTokensRequest_TokenFilter__storage_, startTimeMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTimeMs",
        .dataTypeSpecific.className = NULL,
        .number = GetTokensRequest_TokenFilter_FieldNumber_EndTimeMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetTokensRequest_TokenFilter__storage_, endTimeMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = GetTokensRequest_TokenFilter_Role_EnumDescriptor,
        .number = GetTokensRequest_TokenFilter_FieldNumber_Role,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetTokensRequest_TokenFilter__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokensRequest_TokenFilter class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokensRequest_TokenFilter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetTokensRequest)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetTokensRequest_TokenFilter_Role_RawValue(GetTokensRequest_TokenFilter *message) {
  GPBDescriptor *descriptor = [GetTokensRequest_TokenFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTokensRequest_TokenFilter_FieldNumber_Role];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetTokensRequest_TokenFilter_Role_RawValue(GetTokensRequest_TokenFilter *message, int32_t value) {
  GPBDescriptor *descriptor = [GetTokensRequest_TokenFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTokensRequest_TokenFilter_FieldNumber_Role];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GetTokensRequest_TokenFilter_Role

GPBEnumDescriptor *GetTokensRequest_TokenFilter_Role_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Any\000From\000To\000Issuer\000";
    static const int32_t values[] = {
        GetTokensRequest_TokenFilter_Role_Any,
        GetTokensRequest_TokenFilter_Role_From,
        GetTokensRequest_TokenFilter_Role_To,
        GetTokensRequest_TokenFilter_Role_Issuer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GetTokensRequest_TokenFilter_Role)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GetTokensRequest_TokenFilter_Role_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GetTokensRequest_TokenFilter_Role_IsValidValue(int32_t value__) {
  switch (value__) {
    case GetTokensRequest_TokenFilter_Role_Any:
    case GetTokensRequest_TokenFilter_Role_From:
    case GetTokensRequest_TokenFilter_Role_To:
    case GetTokensRequest_TokenFilter_Role_Issuer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetTokensResponse

@implementation GetTokensResponse

@dynamic tokensArray, tokensArray_Count;
@dynamic offset;

typedef struct GetTokensResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tokensArray;
  NSString *offset;
} GetTokensResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = GetTokensResponse_FieldNumber_TokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTokensResponse__storage_, tokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTokensResponse_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokensResponse__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokensResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokensResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorseTokenRequest

@implementation EndorseTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct EndorseTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} EndorseTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = EndorseTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorseTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = EndorseTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndorseTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorseTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorseTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorseTokenResponse

@implementation EndorseTokenResponse

@dynamic hasResult, result;

typedef struct EndorseTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  TokenOperationResult *result;
} EndorseTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenOperationResult),
        .number = EndorseTokenResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorseTokenResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorseTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorseTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelTokenRequest

@implementation CancelTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct CancelTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} CancelTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = CancelTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = CancelTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelTokenResponse

@implementation CancelTokenResponse

@dynamic hasResult, result;

typedef struct CancelTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  TokenOperationResult *result;
} CancelTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenOperationResult),
        .number = CancelTokenResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelTokenResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReplaceTokenRequest

@implementation ReplaceTokenRequest

@dynamic hasCancelToken, cancelToken;
@dynamic hasCreateToken, createToken;

typedef struct ReplaceTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  ReplaceTokenRequest_CancelToken *cancelToken;
  ReplaceTokenRequest_CreateToken *createToken;
} ReplaceTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cancelToken",
        .dataTypeSpecific.className = GPBStringifySymbol(ReplaceTokenRequest_CancelToken),
        .number = ReplaceTokenRequest_FieldNumber_CancelToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplaceTokenRequest__storage_, cancelToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createToken",
        .dataTypeSpecific.className = GPBStringifySymbol(ReplaceTokenRequest_CreateToken),
        .number = ReplaceTokenRequest_FieldNumber_CreateToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplaceTokenRequest__storage_, createToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplaceTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplaceTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReplaceTokenRequest_CancelToken

@implementation ReplaceTokenRequest_CancelToken

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct ReplaceTokenRequest_CancelToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} ReplaceTokenRequest_CancelToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = ReplaceTokenRequest_CancelToken_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplaceTokenRequest_CancelToken__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = ReplaceTokenRequest_CancelToken_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplaceTokenRequest_CancelToken__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplaceTokenRequest_CancelToken class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplaceTokenRequest_CancelToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ReplaceTokenRequest)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReplaceTokenRequest_CreateToken

@implementation ReplaceTokenRequest_CreateToken

@dynamic hasPayload, payload;
@dynamic hasPayloadSignature, payloadSignature;

typedef struct ReplaceTokenRequest_CreateToken__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *payload;
  Signature *payloadSignature;
} ReplaceTokenRequest_CreateToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenPayload),
        .number = ReplaceTokenRequest_CreateToken_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplaceTokenRequest_CreateToken__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payloadSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = ReplaceTokenRequest_CreateToken_FieldNumber_PayloadSignature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplaceTokenRequest_CreateToken__storage_, payloadSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplaceTokenRequest_CreateToken class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplaceTokenRequest_CreateToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ReplaceTokenRequest)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReplaceTokenResponse

@implementation ReplaceTokenResponse

@dynamic hasResult, result;

typedef struct ReplaceTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  TokenOperationResult *result;
} ReplaceTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenOperationResult),
        .number = ReplaceTokenResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplaceTokenResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplaceTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplaceTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTransferRequest

@implementation CreateTransferRequest

@dynamic hasPayload, payload;
@dynamic hasPayloadSignature, payloadSignature;

typedef struct CreateTransferRequest__storage_ {
  uint32_t _has_storage_[1];
  TransferPayload *payload;
  Signature *payloadSignature;
} CreateTransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferPayload),
        .number = CreateTransferRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTransferRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payloadSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = CreateTransferRequest_FieldNumber_PayloadSignature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateTransferRequest__storage_, payloadSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTransferRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTransferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTransferResponse

@implementation CreateTransferResponse

@dynamic hasTransfer, transfer;

typedef struct CreateTransferResponse__storage_ {
  uint32_t _has_storage_[1];
  Transfer *transfer;
} CreateTransferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transfer",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = CreateTransferResponse_FieldNumber_Transfer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTransferResponse__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTransferResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTransferResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransferRequest

@implementation GetTransferRequest

@dynamic transferId;

typedef struct GetTransferRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} GetTransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransferRequest_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransferRequest__storage_, transferId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransferRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransferResponse

@implementation GetTransferResponse

@dynamic hasTransfer, transfer;

typedef struct GetTransferResponse__storage_ {
  uint32_t _has_storage_[1];
  Transfer *transfer;
} GetTransferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transfer",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = GetTransferResponse_FieldNumber_Transfer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransferResponse__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransferResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransferResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransfersRequest

@implementation GetTransfersRequest

@dynamic tokenId;
@dynamic hasPage, page;
@dynamic hasFilter, filter;

typedef struct GetTransfersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Page *page;
  GetTransfersRequest_TransferFilter *filter;
} GetTransfersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransfersRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransfersRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = GetTransfersRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransfersRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "filter",
        .dataTypeSpecific.className = GPBStringifySymbol(GetTransfersRequest_TransferFilter),
        .number = GetTransfersRequest_FieldNumber_Filter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTransfersRequest__storage_, filter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransfersRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransfersRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransfersRequest_TransferFilter

@implementation GetTransfersRequest_TransferFilter

@dynamic tokenId;
@dynamic startTimeMs;
@dynamic endTimeMs;
@dynamic transactionStatus;
@dynamic role;

typedef struct GetTransfersRequest_TransferFilter__storage_ {
  uint32_t _has_storage_[1];
  TransactionStatus transactionStatus;
  GetTransfersRequest_TransferFilter_Role role;
  NSString *tokenId;
  int64_t startTimeMs;
  int64_t endTimeMs;
} GetTransfersRequest_TransferFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransfersRequest_TransferFilter_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransfersRequest_TransferFilter__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTimeMs",
        .dataTypeSpecific.className = NULL,
        .number = GetTransfersRequest_TransferFilter_FieldNumber_StartTimeMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransfersRequest_TransferFilter__storage_, startTimeMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTimeMs",
        .dataTypeSpecific.className = NULL,
        .number = GetTransfersRequest_TransferFilter_FieldNumber_EndTimeMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTransfersRequest_TransferFilter__storage_, endTimeMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "transactionStatus",
        .dataTypeSpecific.enumDescFunc = TransactionStatus_EnumDescriptor,
        .number = GetTransfersRequest_TransferFilter_FieldNumber_TransactionStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetTransfersRequest_TransferFilter__storage_, transactionStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = GetTransfersRequest_TransferFilter_Role_EnumDescriptor,
        .number = GetTransfersRequest_TransferFilter_FieldNumber_Role,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetTransfersRequest_TransferFilter__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransfersRequest_TransferFilter class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransfersRequest_TransferFilter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetTransfersRequest)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetTransfersRequest_TransferFilter_TransactionStatus_RawValue(GetTransfersRequest_TransferFilter *message) {
  GPBDescriptor *descriptor = [GetTransfersRequest_TransferFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransfersRequest_TransferFilter_FieldNumber_TransactionStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetTransfersRequest_TransferFilter_TransactionStatus_RawValue(GetTransfersRequest_TransferFilter *message, int32_t value) {
  GPBDescriptor *descriptor = [GetTransfersRequest_TransferFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransfersRequest_TransferFilter_FieldNumber_TransactionStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t GetTransfersRequest_TransferFilter_Role_RawValue(GetTransfersRequest_TransferFilter *message) {
  GPBDescriptor *descriptor = [GetTransfersRequest_TransferFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransfersRequest_TransferFilter_FieldNumber_Role];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetTransfersRequest_TransferFilter_Role_RawValue(GetTransfersRequest_TransferFilter *message, int32_t value) {
  GPBDescriptor *descriptor = [GetTransfersRequest_TransferFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTransfersRequest_TransferFilter_FieldNumber_Role];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GetTransfersRequest_TransferFilter_Role

GPBEnumDescriptor *GetTransfersRequest_TransferFilter_Role_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Any\000Payer\000Payee\000";
    static const int32_t values[] = {
        GetTransfersRequest_TransferFilter_Role_Any,
        GetTransfersRequest_TransferFilter_Role_Payer,
        GetTransfersRequest_TransferFilter_Role_Payee,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GetTransfersRequest_TransferFilter_Role)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GetTransfersRequest_TransferFilter_Role_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GetTransfersRequest_TransferFilter_Role_IsValidValue(int32_t value__) {
  switch (value__) {
    case GetTransfersRequest_TransferFilter_Role_Any:
    case GetTransfersRequest_TransferFilter_Role_Payer:
    case GetTransfersRequest_TransferFilter_Role_Payee:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetTransfersResponse

@implementation GetTransfersResponse

@dynamic transfersArray, transfersArray_Count;
@dynamic offset;

typedef struct GetTransfersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transfersArray;
  NSString *offset;
} GetTransfersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transfersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = GetTransfersResponse_FieldNumber_TransfersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransfersResponse__storage_, transfersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTransfersResponse_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransfersResponse__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransfersResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransfersResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBanksRequest

@implementation GetBanksRequest


typedef struct GetBanksRequest__storage_ {
  uint32_t _has_storage_[1];
} GetBanksRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBanksRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetBanksRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBanksResponse

@implementation GetBanksResponse

@dynamic banksArray, banksArray_Count;

typedef struct GetBanksResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *banksArray;
} GetBanksResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "banksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Bank),
        .number = GetBanksResponse_FieldNumber_BanksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetBanksResponse__storage_, banksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBanksResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBanksResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBankInfoRequest

@implementation GetBankInfoRequest

@dynamic bankId;

typedef struct GetBankInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
} GetBankInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = GetBankInfoRequest_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBankInfoRequest__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBankInfoRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBankInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBankInfoResponse

@implementation GetBankInfoResponse

@dynamic hasInfo, info;

typedef struct GetBankInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  BankInfo *info;
} GetBankInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(BankInfo),
        .number = GetBankInfoResponse_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBankInfoResponse__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBankInfoResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBankInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTestBankAccountRequest

@implementation CreateTestBankAccountRequest

@dynamic hasBalance, balance;

typedef struct CreateTestBankAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  Money *balance;
} CreateTestBankAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "balance",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = CreateTestBankAccountRequest_FieldNumber_Balance,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTestBankAccountRequest__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTestBankAccountRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTestBankAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTestBankAccountResponse

@implementation CreateTestBankAccountResponse

@dynamic hasBankAuthorization, bankAuthorization;

typedef struct CreateTestBankAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  BankAuthorization *bankAuthorization;
} CreateTestBankAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankAuthorization",
        .dataTypeSpecific.className = GPBStringifySymbol(BankAuthorization),
        .number = CreateTestBankAccountResponse_FieldNumber_BankAuthorization,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTestBankAccountResponse__storage_, bankAuthorization),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTestBankAccountResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTestBankAccountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTestBankNotificationRequest

@implementation GetTestBankNotificationRequest

@dynamic subscriberId;
@dynamic notificationId;

typedef struct GetTestBankNotificationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
  NSString *notificationId;
} GetTestBankNotificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = GetTestBankNotificationRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTestBankNotificationRequest__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notificationId",
        .dataTypeSpecific.className = NULL,
        .number = GetTestBankNotificationRequest_FieldNumber_NotificationId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTestBankNotificationRequest__storage_, notificationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTestBankNotificationRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTestBankNotificationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTestBankNotificationResponse

@implementation GetTestBankNotificationResponse

@dynamic hasNotification, notification;

typedef struct GetTestBankNotificationResponse__storage_ {
  uint32_t _has_storage_[1];
  Notification *notification;
} GetTestBankNotificationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notification",
        .dataTypeSpecific.className = GPBStringifySymbol(Notification),
        .number = GetTestBankNotificationResponse_FieldNumber_Notification,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTestBankNotificationResponse__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTestBankNotificationResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTestBankNotificationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTestBankNotificationsRequest

@implementation GetTestBankNotificationsRequest

@dynamic subscriberId;

typedef struct GetTestBankNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
} GetTestBankNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = GetTestBankNotificationsRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTestBankNotificationsRequest__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTestBankNotificationsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTestBankNotificationsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTestBankNotificationsResponse

@implementation GetTestBankNotificationsResponse

@dynamic notificationsArray, notificationsArray_Count;

typedef struct GetTestBankNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *notificationsArray;
} GetTestBankNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notificationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Notification),
        .number = GetTestBankNotificationsResponse_FieldNumber_NotificationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTestBankNotificationsResponse__storage_, notificationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTestBankNotificationsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTestBankNotificationsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
