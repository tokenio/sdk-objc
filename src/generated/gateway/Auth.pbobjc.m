// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway/auth.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gateway/Auth.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AuthRoot

@implementation AuthRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AuthRoot_FileDescriptor

static GPBFileDescriptor *AuthRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.gateway"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - HttpAuthPayload

@implementation HttpAuthPayload

@dynamic method;
@dynamic uriHost;
@dynamic uriPath;
@dynamic queryString;
@dynamic requestBody;
@dynamic createdAtMs;

typedef struct HttpAuthPayload__storage_ {
  uint32_t _has_storage_[1];
  NSString *method;
  NSString *uriHost;
  NSString *uriPath;
  NSString *queryString;
  NSString *requestBody;
  int64_t createdAtMs;
} HttpAuthPayload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "method",
        .dataTypeSpecific.className = NULL,
        .number = HttpAuthPayload_FieldNumber_Method,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HttpAuthPayload__storage_, method),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uriHost",
        .dataTypeSpecific.className = NULL,
        .number = HttpAuthPayload_FieldNumber_UriHost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HttpAuthPayload__storage_, uriHost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uriPath",
        .dataTypeSpecific.className = NULL,
        .number = HttpAuthPayload_FieldNumber_UriPath,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HttpAuthPayload__storage_, uriPath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "queryString",
        .dataTypeSpecific.className = NULL,
        .number = HttpAuthPayload_FieldNumber_QueryString,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HttpAuthPayload__storage_, queryString),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestBody",
        .dataTypeSpecific.className = NULL,
        .number = HttpAuthPayload_FieldNumber_RequestBody,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HttpAuthPayload__storage_, requestBody),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAtMs",
        .dataTypeSpecific.className = NULL,
        .number = HttpAuthPayload_FieldNumber_CreatedAtMs,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HttpAuthPayload__storage_, createdAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HttpAuthPayload class]
                                     rootClass:[AuthRoot class]
                                          file:AuthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HttpAuthPayload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GrpcAuthPayload

@implementation GrpcAuthPayload

@dynamic request;
@dynamic createdAtMs;

typedef struct GrpcAuthPayload__storage_ {
  uint32_t _has_storage_[1];
  NSData *request;
  int64_t createdAtMs;
} GrpcAuthPayload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "request",
        .dataTypeSpecific.className = NULL,
        .number = GrpcAuthPayload_FieldNumber_Request,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GrpcAuthPayload__storage_, request),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "createdAtMs",
        .dataTypeSpecific.className = NULL,
        .number = GrpcAuthPayload_FieldNumber_CreatedAtMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GrpcAuthPayload__storage_, createdAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GrpcAuthPayload class]
                                     rootClass:[AuthRoot class]
                                          file:AuthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GrpcAuthPayload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
