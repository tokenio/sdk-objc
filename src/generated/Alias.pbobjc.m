// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alias.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Alias.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AliasRoot

@implementation AliasRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AliasRoot_FileDescriptor

static GPBFileDescriptor *AliasRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.alias"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Alias

@implementation Alias

@dynamic type;
@dynamic value;

typedef struct Alias__storage_ {
  uint32_t _has_storage_[1];
  Alias_Type type;
  NSString *value;
} Alias__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Alias_Type_EnumDescriptor,
        .number = Alias_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Alias__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Alias_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Alias__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Alias class]
                                     rootClass:[AliasRoot class]
                                          file:AliasRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Alias__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Alias_Type_RawValue(Alias *message) {
  GPBDescriptor *descriptor = [Alias descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Alias_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetAlias_Type_RawValue(Alias *message, int32_t value) {
  GPBDescriptor *descriptor = [Alias descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Alias_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Alias_Type

GPBEnumDescriptor *Alias_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Unknown\000Email\000Phone\000Domain\000Usern"
        "ame\000";
    static const int32_t values[] = {
        Alias_Type_Invalid,
        Alias_Type_Unknown,
        Alias_Type_Email,
        Alias_Type_Phone,
        Alias_Type_Domain,
        Alias_Type_Username,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Alias_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Alias_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Alias_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Alias_Type_Invalid:
    case Alias_Type_Unknown:
    case Alias_Type_Email:
    case Alias_Type_Phone:
    case Alias_Type_Domain:
    case Alias_Type_Username:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
