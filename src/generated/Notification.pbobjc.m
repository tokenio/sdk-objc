// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Notification.pbobjc.h"
#import "Banklink.pbobjc.h"
#import "Security.pbobjc.h"
#import "Token.pbobjc.h"
#import "Member.pbobjc.h"
#import "extensions/Field.pbobjc.h"
#import "extensions/Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AddKey);
GPBObjCClassDeclaration(BalanceStepUp);
GPBObjCClassDeclaration(BankAuthorization);
GPBObjCClassDeclaration(CreateAndEndorseToken);
GPBObjCClassDeclaration(DeviceMetadata);
GPBObjCClassDeclaration(EndorseAndAddKey);
GPBObjCClassDeclaration(Key);
GPBObjCClassDeclaration(LinkAccounts);
GPBObjCClassDeclaration(LinkAccountsAndAddKey);
GPBObjCClassDeclaration(NotificationContent);
GPBObjCClassDeclaration(NotificationInvalidated);
GPBObjCClassDeclaration(PayeeTransferProcessed);
GPBObjCClassDeclaration(PayerTransferFailed);
GPBObjCClassDeclaration(PayerTransferProcessed);
GPBObjCClassDeclaration(PaymentRequest);
GPBObjCClassDeclaration(ReceiptContact);
GPBObjCClassDeclaration(RecoveryCompleted);
GPBObjCClassDeclaration(StepUp);
GPBObjCClassDeclaration(TokenCancelled);
GPBObjCClassDeclaration(TokenPayload);
GPBObjCClassDeclaration(TokenRequest);
GPBObjCClassDeclaration(TransactionStepUp);
GPBObjCClassDeclaration(TransferFailed);
GPBObjCClassDeclaration(TransferProcessed);

#pragma mark - NotificationRoot

@implementation NotificationRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[FieldRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - NotificationRoot_FileDescriptor

static GPBFileDescriptor *NotificationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.notification"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum NotifyStatus

GPBEnumDescriptor *NotifyStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Accepted\000NoSubscribers\000";
    static const int32_t values[] = {
        NotifyStatus_Invalid,
        NotifyStatus_Accepted,
        NotifyStatus_NoSubscribers,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NotifyStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NotifyStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NotifyStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case NotifyStatus_Invalid:
    case NotifyStatus_Accepted:
    case NotifyStatus_NoSubscribers:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DeviceMetadata

@implementation DeviceMetadata

@dynamic application;
@dynamic applicationVersion;
@dynamic device;
@dynamic longitude;
@dynamic latitude;

typedef struct DeviceMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *application;
  NSString *applicationVersion;
  NSString *device;
  double longitude;
  double latitude;
} DeviceMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "application",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceMetadata_FieldNumber_Application,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeviceMetadata__storage_, application),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "applicationVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceMetadata_FieldNumber_ApplicationVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeviceMetadata__storage_, applicationVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "device",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceMetadata_FieldNumber_Device,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DeviceMetadata__storage_, device),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceMetadata_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DeviceMetadata__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceMetadata_FieldNumber_Latitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DeviceMetadata__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeviceMetadata class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeviceMetadata__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PayerTransferProcessed

@implementation PayerTransferProcessed

@dynamic transferId;

typedef struct PayerTransferProcessed__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} PayerTransferProcessed__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.clazz = Nil,
        .number = PayerTransferProcessed_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PayerTransferProcessed__storage_, transferId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PayerTransferProcessed class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PayerTransferProcessed__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PayeeTransferProcessed

@implementation PayeeTransferProcessed

@dynamic transferId;

typedef struct PayeeTransferProcessed__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} PayeeTransferProcessed__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.clazz = Nil,
        .number = PayeeTransferProcessed_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PayeeTransferProcessed__storage_, transferId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PayeeTransferProcessed class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PayeeTransferProcessed__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PayerTransferFailed

@implementation PayerTransferFailed

@dynamic transferId;

typedef struct PayerTransferFailed__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} PayerTransferFailed__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.clazz = Nil,
        .number = PayerTransferFailed_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PayerTransferFailed__storage_, transferId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PayerTransferFailed class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PayerTransferFailed__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferProcessed

@implementation TransferProcessed

@dynamic transferId;

typedef struct TransferProcessed__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} TransferProcessed__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.clazz = Nil,
        .number = TransferProcessed_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferProcessed__storage_, transferId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferProcessed class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferProcessed__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferFailed

@implementation TransferFailed

@dynamic transferId;

typedef struct TransferFailed__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} TransferFailed__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.clazz = Nil,
        .number = TransferFailed_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferFailed__storage_, transferId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferFailed class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferFailed__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccounts

@implementation LinkAccounts

@dynamic hasBankAuthorization, bankAuthorization;

typedef struct LinkAccounts__storage_ {
  uint32_t _has_storage_[1];
  BankAuthorization *bankAuthorization;
} LinkAccounts__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankAuthorization",
        .dataTypeSpecific.clazz = GPBObjCClass(BankAuthorization),
        .number = LinkAccounts_FieldNumber_BankAuthorization,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkAccounts__storage_, bankAuthorization),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccounts class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccounts__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StepUp

@implementation StepUp

@dynamic tokenId;

typedef struct StepUp__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
} StepUp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.clazz = Nil,
        .number = StepUp_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StepUp__storage_, tokenId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StepUp class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StepUp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BalanceStepUp

@implementation BalanceStepUp

@dynamic accountIdArray, accountIdArray_Count;

typedef struct BalanceStepUp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountIdArray;
} BalanceStepUp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountIdArray",
        .dataTypeSpecific.clazz = Nil,
        .number = BalanceStepUp_FieldNumber_AccountIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BalanceStepUp__storage_, accountIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BalanceStepUp class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BalanceStepUp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionStepUp

@implementation TransactionStepUp

@dynamic accountId;
@dynamic transactionId;

typedef struct TransactionStepUp__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *transactionId;
} TransactionStepUp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.clazz = Nil,
        .number = TransactionStepUp_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionStepUp__storage_, accountId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = TransactionStepUp_FieldNumber_TransactionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransactionStepUp__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionStepUp class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionStepUp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecoveryCompleted

@implementation RecoveryCompleted


typedef struct RecoveryCompleted__storage_ {
  uint32_t _has_storage_[1];
} RecoveryCompleted__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecoveryCompleted class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RecoveryCompleted__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddKey

@implementation AddKey

@dynamic expiresMs;
@dynamic keysArray, keysArray_Count;
@dynamic hasDeviceMetadata, deviceMetadata;

typedef struct AddKey__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
  DeviceMetadata *deviceMetadata;
  int64_t expiresMs;
} AddKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expiresMs",
        .dataTypeSpecific.clazz = Nil,
        .number = AddKey_FieldNumber_ExpiresMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddKey__storage_, expiresMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "keysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Key),
        .number = AddKey_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddKey__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceMetadata",
        .dataTypeSpecific.clazz = GPBObjCClass(DeviceMetadata),
        .number = AddKey_FieldNumber_DeviceMetadata,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddKey__storage_, deviceMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddKey class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddKey__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccountsAndAddKey

@implementation LinkAccountsAndAddKey

@dynamic hasLinkAccounts, linkAccounts;
@dynamic hasAddKey, addKey;

typedef struct LinkAccountsAndAddKey__storage_ {
  uint32_t _has_storage_[1];
  LinkAccounts *linkAccounts;
  AddKey *addKey;
} LinkAccountsAndAddKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linkAccounts",
        .dataTypeSpecific.clazz = GPBObjCClass(LinkAccounts),
        .number = LinkAccountsAndAddKey_FieldNumber_LinkAccounts,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkAccountsAndAddKey__storage_, linkAccounts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addKey",
        .dataTypeSpecific.clazz = GPBObjCClass(AddKey),
        .number = LinkAccountsAndAddKey_FieldNumber_AddKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LinkAccountsAndAddKey__storage_, addKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsAndAddKey class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsAndAddKey__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PaymentRequest

@implementation PaymentRequest

@dynamic hasPayload, payload;

typedef struct PaymentRequest__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *payload;
} PaymentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.clazz = GPBObjCClass(TokenPayload),
        .number = PaymentRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PaymentRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PaymentRequest class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PaymentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TokenCancelled

@implementation TokenCancelled

@dynamic tokenId;

typedef struct TokenCancelled__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
} TokenCancelled__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.clazz = Nil,
        .number = TokenCancelled_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenCancelled__storage_, tokenId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenCancelled class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenCancelled__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorseAndAddKey

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-implementations"

@implementation EndorseAndAddKey

@dynamic hasPayload, payload;
@dynamic hasAddKey, addKey;
@dynamic tokenRequestId;
@dynamic bankId;
@dynamic state;
@dynamic hasContact, contact;

typedef struct EndorseAndAddKey__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *payload;
  AddKey *addKey;
  NSString *tokenRequestId;
  NSString *bankId;
  NSString *state;
  ReceiptContact *contact;
} EndorseAndAddKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.clazz = GPBObjCClass(TokenPayload),
        .number = EndorseAndAddKey_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorseAndAddKey__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addKey",
        .dataTypeSpecific.clazz = GPBObjCClass(AddKey),
        .number = EndorseAndAddKey_FieldNumber_AddKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndorseAndAddKey__storage_, addKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenRequestId",
        .dataTypeSpecific.clazz = Nil,
        .number = EndorseAndAddKey_FieldNumber_TokenRequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EndorseAndAddKey__storage_, tokenRequestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankId",
        .dataTypeSpecific.clazz = Nil,
        .number = EndorseAndAddKey_FieldNumber_BankId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EndorseAndAddKey__storage_, bankId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = EndorseAndAddKey_FieldNumber_State,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EndorseAndAddKey__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contact",
        .dataTypeSpecific.clazz = GPBObjCClass(ReceiptContact),
        .number = EndorseAndAddKey_FieldNumber_Contact,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EndorseAndAddKey__storage_, contact),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorseAndAddKey class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorseAndAddKey__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma clang diagnostic pop

#pragma mark - CreateAndEndorseToken

@implementation CreateAndEndorseToken

@dynamic hasTokenRequest, tokenRequest;
@dynamic hasAddKey, addKey;
@dynamic hasContact, contact;

typedef struct CreateAndEndorseToken__storage_ {
  uint32_t _has_storage_[1];
  TokenRequest *tokenRequest;
  AddKey *addKey;
  ReceiptContact *contact;
} CreateAndEndorseToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenRequest",
        .dataTypeSpecific.clazz = GPBObjCClass(TokenRequest),
        .number = CreateAndEndorseToken_FieldNumber_TokenRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateAndEndorseToken__storage_, tokenRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addKey",
        .dataTypeSpecific.clazz = GPBObjCClass(AddKey),
        .number = CreateAndEndorseToken_FieldNumber_AddKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateAndEndorseToken__storage_, addKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contact",
        .dataTypeSpecific.clazz = GPBObjCClass(ReceiptContact),
        .number = CreateAndEndorseToken_FieldNumber_Contact,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateAndEndorseToken__storage_, contact),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateAndEndorseToken class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateAndEndorseToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotificationInvalidated

@implementation NotificationInvalidated

@dynamic previousNotificationId;

typedef struct NotificationInvalidated__storage_ {
  uint32_t _has_storage_[1];
  NSString *previousNotificationId;
} NotificationInvalidated__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "previousNotificationId",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationInvalidated_FieldNumber_PreviousNotificationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotificationInvalidated__storage_, previousNotificationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotificationInvalidated class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotificationInvalidated__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyBody

@implementation NotifyBody

@dynamic bodyOneOfCase;
@dynamic payerTransferProcessed;
@dynamic linkAccounts;
@dynamic stepUp;
@dynamic addKey;
@dynamic linkAccountsAndAddKey;
@dynamic payeeTransferProcessed;
@dynamic paymentRequest;
@dynamic payerTransferFailed;
@dynamic transferProcessed;
@dynamic transferFailed;
@dynamic tokenCancelled;
@dynamic balanceStepUp;
@dynamic transactionStepUp;
@dynamic endorseAndAddKey;
@dynamic recoveryCompleted;
@dynamic notificationInvalidated;
@dynamic createAndEndorseToken;

typedef struct NotifyBody__storage_ {
  uint32_t _has_storage_[2];
  PayerTransferProcessed *payerTransferProcessed;
  LinkAccounts *linkAccounts;
  StepUp *stepUp;
  AddKey *addKey;
  LinkAccountsAndAddKey *linkAccountsAndAddKey;
  PayeeTransferProcessed *payeeTransferProcessed;
  PaymentRequest *paymentRequest;
  PayerTransferFailed *payerTransferFailed;
  TransferProcessed *transferProcessed;
  TransferFailed *transferFailed;
  TokenCancelled *tokenCancelled;
  BalanceStepUp *balanceStepUp;
  TransactionStepUp *transactionStepUp;
  EndorseAndAddKey *endorseAndAddKey;
  RecoveryCompleted *recoveryCompleted;
  NotificationInvalidated *notificationInvalidated;
  CreateAndEndorseToken *createAndEndorseToken;
} NotifyBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerTransferProcessed",
        .dataTypeSpecific.clazz = GPBObjCClass(PayerTransferProcessed),
        .number = NotifyBody_FieldNumber_PayerTransferProcessed,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, payerTransferProcessed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkAccounts",
        .dataTypeSpecific.clazz = GPBObjCClass(LinkAccounts),
        .number = NotifyBody_FieldNumber_LinkAccounts,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, linkAccounts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stepUp",
        .dataTypeSpecific.clazz = GPBObjCClass(StepUp),
        .number = NotifyBody_FieldNumber_StepUp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, stepUp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addKey",
        .dataTypeSpecific.clazz = GPBObjCClass(AddKey),
        .number = NotifyBody_FieldNumber_AddKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, addKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkAccountsAndAddKey",
        .dataTypeSpecific.clazz = GPBObjCClass(LinkAccountsAndAddKey),
        .number = NotifyBody_FieldNumber_LinkAccountsAndAddKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, linkAccountsAndAddKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payeeTransferProcessed",
        .dataTypeSpecific.clazz = GPBObjCClass(PayeeTransferProcessed),
        .number = NotifyBody_FieldNumber_PayeeTransferProcessed,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, payeeTransferProcessed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "paymentRequest",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentRequest),
        .number = NotifyBody_FieldNumber_PaymentRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, paymentRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payerTransferFailed",
        .dataTypeSpecific.clazz = GPBObjCClass(PayerTransferFailed),
        .number = NotifyBody_FieldNumber_PayerTransferFailed,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, payerTransferFailed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transferProcessed",
        .dataTypeSpecific.clazz = GPBObjCClass(TransferProcessed),
        .number = NotifyBody_FieldNumber_TransferProcessed,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, transferProcessed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transferFailed",
        .dataTypeSpecific.clazz = GPBObjCClass(TransferFailed),
        .number = NotifyBody_FieldNumber_TransferFailed,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, transferFailed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenCancelled",
        .dataTypeSpecific.clazz = GPBObjCClass(TokenCancelled),
        .number = NotifyBody_FieldNumber_TokenCancelled,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, tokenCancelled),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "balanceStepUp",
        .dataTypeSpecific.clazz = GPBObjCClass(BalanceStepUp),
        .number = NotifyBody_FieldNumber_BalanceStepUp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, balanceStepUp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionStepUp",
        .dataTypeSpecific.clazz = GPBObjCClass(TransactionStepUp),
        .number = NotifyBody_FieldNumber_TransactionStepUp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, transactionStepUp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endorseAndAddKey",
        .dataTypeSpecific.clazz = GPBObjCClass(EndorseAndAddKey),
        .number = NotifyBody_FieldNumber_EndorseAndAddKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, endorseAndAddKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "recoveryCompleted",
        .dataTypeSpecific.clazz = GPBObjCClass(RecoveryCompleted),
        .number = NotifyBody_FieldNumber_RecoveryCompleted,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, recoveryCompleted),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notificationInvalidated",
        .dataTypeSpecific.clazz = GPBObjCClass(NotificationInvalidated),
        .number = NotifyBody_FieldNumber_NotificationInvalidated,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, notificationInvalidated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createAndEndorseToken",
        .dataTypeSpecific.clazz = GPBObjCClass(CreateAndEndorseToken),
        .number = NotifyBody_FieldNumber_CreateAndEndorseToken,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, createAndEndorseToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyBody class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "body",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void NotifyBody_ClearBodyOneOfCase(NotifyBody *message) {
  GPBDescriptor *descriptor = [NotifyBody descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Notification

@implementation Notification

@dynamic id_p;
@dynamic subscriberId;
@dynamic hasContent, content;
@dynamic status;

typedef struct Notification__storage_ {
  uint32_t _has_storage_[1];
  Notification_Status status;
  NSString *id_p;
  NSString *subscriberId;
  NotificationContent *content;
} Notification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Notification_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Notification__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subscriberId",
        .dataTypeSpecific.clazz = Nil,
        .number = Notification_FieldNumber_SubscriberId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Notification__storage_, subscriberId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = GPBObjCClass(NotificationContent),
        .number = Notification_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Notification__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = Notification_Status_EnumDescriptor,
        .number = Notification_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Notification__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Notification class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Notification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Notification_Status_RawValue(Notification *message) {
  GPBDescriptor *descriptor = [Notification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Notification_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetNotification_Status_RawValue(Notification *message, int32_t value) {
  GPBDescriptor *descriptor = [Notification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Notification_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Notification_Status

GPBEnumDescriptor *Notification_Status_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Pending\000Delivered\000Completed\000Inva"
        "lidated\000NoActionRequired\000Declined\000";
    static const int32_t values[] = {
        Notification_Status_Invalid,
        Notification_Status_Pending,
        Notification_Status_Delivered,
        Notification_Status_Completed,
        Notification_Status_Invalidated,
        Notification_Status_NoActionRequired,
        Notification_Status_Declined,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Notification_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Notification_Status_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Notification_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case Notification_Status_Invalid:
    case Notification_Status_Pending:
    case Notification_Status_Delivered:
    case Notification_Status_Completed:
    case Notification_Status_Invalidated:
    case Notification_Status_NoActionRequired:
    case Notification_Status_Declined:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - NotificationContent

@implementation NotificationContent

@dynamic type;
@dynamic title;
@dynamic body;
@dynamic payload;
@dynamic createdAtMs;
@dynamic locKey;
@dynamic locArgsArray, locArgsArray_Count;

typedef struct NotificationContent__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSString *title;
  NSString *body;
  NSString *payload;
  NSString *locKey;
  NSMutableArray *locArgsArray;
  int64_t createdAtMs;
} NotificationContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationContent_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationContent_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationContent_FieldNumber_Body,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationContent_FieldNumber_Payload,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, payload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAtMs",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationContent_FieldNumber_CreatedAtMs,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, createdAtMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "locKey",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationContent_FieldNumber_LocKey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, locKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locArgsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = NotificationContent_FieldNumber_LocArgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, locArgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotificationContent class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotificationContent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
