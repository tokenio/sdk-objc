// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eidas.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Alias;
GPB_ENUM_FWD_DECLARE(Key_Algorithm);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum KonsentusVerificationStatus

/**
 * When a TPP verifies an eIDAS alias by providing a certificate (and all preconditions are met on
 * our side) the verification may succeed or fail on the Konsentus side in two different ways
 **/
typedef GPB_ENUM(KonsentusVerificationStatus) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  KonsentusVerificationStatus_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  KonsentusVerificationStatus_Invalid = 0,
  KonsentusVerificationStatus_Success = 1,

  /** The request has succeeded (code 200), but at least one eIDAS.validity field in the response body is false */
  KonsentusVerificationStatus_FailureEidasInvalid = 2,

  /** Konsentus returned an error response (codes 4xx and 5xx) */
  KonsentusVerificationStatus_FailureErrorResponse = 3,
};

GPBEnumDescriptor *KonsentusVerificationStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL KonsentusVerificationStatus_IsValidValue(int32_t value);

#pragma mark - EidasRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface EidasRoot : GPBRootObject
@end

#pragma mark - VerifyEidasPayload

typedef GPB_ENUM(VerifyEidasPayload_FieldNumber) {
  VerifyEidasPayload_FieldNumber_MemberId = 1,
  VerifyEidasPayload_FieldNumber_Alias = 2,
  VerifyEidasPayload_FieldNumber_Certificate = 3,
  VerifyEidasPayload_FieldNumber_Algorithm = 4,
};

GPB_FINAL @interface VerifyEidasPayload : GPBMessage

/** member ID of the TPP */
@property(nonatomic, readwrite, copy, null_resettable) NSString *memberId;

/** eIDAS alias to be verified */
@property(nonatomic, readwrite, strong, null_resettable) Alias *alias;
/** Test to see if @c alias has been set. */
@property(nonatomic, readwrite) BOOL hasAlias;

/** serialized eIDAS certificate */
@property(nonatomic, readwrite, copy, null_resettable) NSString *certificate;

/** signing algorithm of the eIDAS certificate */
@property(nonatomic, readwrite) enum Key_Algorithm algorithm;

@end

/**
 * Fetches the raw value of a @c VerifyEidasPayload's @c algorithm property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t VerifyEidasPayload_Algorithm_RawValue(VerifyEidasPayload *message);
/**
 * Sets the raw value of an @c VerifyEidasPayload's @c algorithm property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVerifyEidasPayload_Algorithm_RawValue(VerifyEidasPayload *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
