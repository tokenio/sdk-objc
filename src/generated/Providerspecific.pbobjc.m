// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: providerspecific.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Providerspecific.pbobjc.h"
#import "extensions/Message.pbobjc.h"
#import "provider/Cma9.pbobjc.h"
#import "provider/Polishapi.pbobjc.h"
#import "provider/Nextgenpsd2.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ProviderspecificRoot

@implementation ProviderspecificRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[MessageRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ProviderspecificRoot_FileDescriptor

static GPBFileDescriptor *ProviderspecificRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.providerspecific"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ProviderAccountDetails

@implementation ProviderAccountDetails

@dynamic detailsOneOfCase;
@dynamic cma9AccountDetails;
@dynamic polishApiAccountDetails;

typedef struct ProviderAccountDetails__storage_ {
  uint32_t _has_storage_[2];
  Cma9AccountDetails *cma9AccountDetails;
  POLISHAPIPolishApiAccountDetails *polishApiAccountDetails;
} ProviderAccountDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cma9AccountDetails",
        .dataTypeSpecific.className = GPBStringifySymbol(Cma9AccountDetails),
        .number = ProviderAccountDetails_FieldNumber_Cma9AccountDetails,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ProviderAccountDetails__storage_, cma9AccountDetails),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "polishApiAccountDetails",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPIPolishApiAccountDetails),
        .number = ProviderAccountDetails_FieldNumber_PolishApiAccountDetails,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ProviderAccountDetails__storage_, polishApiAccountDetails),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProviderAccountDetails class]
                                     rootClass:[ProviderspecificRoot class]
                                          file:ProviderspecificRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProviderAccountDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "details",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ProviderAccountDetails_ClearDetailsOneOfCase(ProviderAccountDetails *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ProviderTransactionDetails

@implementation ProviderTransactionDetails

@dynamic detailsOneOfCase;
@dynamic polishApiTransactionDetails;

typedef struct ProviderTransactionDetails__storage_ {
  uint32_t _has_storage_[2];
  POLISHAPIPolishApiTransactionDetails *polishApiTransactionDetails;
} ProviderTransactionDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "polishApiTransactionDetails",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPIPolishApiTransactionDetails),
        .number = ProviderTransactionDetails_FieldNumber_PolishApiTransactionDetails,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ProviderTransactionDetails__storage_, polishApiTransactionDetails),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProviderTransactionDetails class]
                                     rootClass:[ProviderspecificRoot class]
                                          file:ProviderspecificRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProviderTransactionDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "details",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ProviderTransactionDetails_ClearDetailsOneOfCase(ProviderTransactionDetails *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ProviderStandingOrderDetails

@implementation ProviderStandingOrderDetails

@dynamic detailsOneOfCase;
@dynamic cma9StandingOrderDetails;

typedef struct ProviderStandingOrderDetails__storage_ {
  uint32_t _has_storage_[2];
  Cma9StandingOrderDetails *cma9StandingOrderDetails;
} ProviderStandingOrderDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cma9StandingOrderDetails",
        .dataTypeSpecific.className = GPBStringifySymbol(Cma9StandingOrderDetails),
        .number = ProviderStandingOrderDetails_FieldNumber_Cma9StandingOrderDetails,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ProviderStandingOrderDetails__storage_, cma9StandingOrderDetails),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProviderStandingOrderDetails class]
                                     rootClass:[ProviderspecificRoot class]
                                          file:ProviderspecificRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProviderStandingOrderDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "details",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ProviderStandingOrderDetails_ClearDetailsOneOfCase(ProviderStandingOrderDetails *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ProviderTransferMetadata

@implementation ProviderTransferMetadata

@dynamic metadataOneOfCase;
@dynamic polishApiTransferMetadata;
@dynamic nextGenPsd2TransferMetadata;

typedef struct ProviderTransferMetadata__storage_ {
  uint32_t _has_storage_[2];
  POLISHAPIPolishApiTransferMetadata *polishApiTransferMetadata;
  NextGenPsd2TransferMetadata *nextGenPsd2TransferMetadata;
} ProviderTransferMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "polishApiTransferMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPIPolishApiTransferMetadata),
        .number = ProviderTransferMetadata_FieldNumber_PolishApiTransferMetadata,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ProviderTransferMetadata__storage_, polishApiTransferMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextGenPsd2TransferMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(NextGenPsd2TransferMetadata),
        .number = ProviderTransferMetadata_FieldNumber_NextGenPsd2TransferMetadata,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ProviderTransferMetadata__storage_, nextGenPsd2TransferMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProviderTransferMetadata class]
                                     rootClass:[ProviderspecificRoot class]
                                          file:ProviderspecificRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProviderTransferMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "metadata",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ProviderTransferMetadata_ClearMetadataOneOfCase(ProviderTransferMetadata *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
