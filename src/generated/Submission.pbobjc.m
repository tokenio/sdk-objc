// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: submission.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Submission.pbobjc.h"
#import "Money.pbobjc.h"
#import "Security.pbobjc.h"
#import "Token.pbobjc.h"
#import "Transferinstructions.pbobjc.h"
#import "extensions/Field.pbobjc.h"
#import "extensions/Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(StandingOrderBody);

#pragma mark - SubmissionRoot

@implementation SubmissionRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[FieldRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SubmissionRoot_FileDescriptor

static GPBFileDescriptor *SubmissionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.submission"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SubmissionStatus

GPBEnumDescriptor *SubmissionStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Pending\000Processing\000Success\000Faile"
        "d\000Initiated\000Canceled\000";
    static const int32_t values[] = {
        SubmissionStatus_Invalid,
        SubmissionStatus_Pending,
        SubmissionStatus_Processing,
        SubmissionStatus_Success,
        SubmissionStatus_Failed,
        SubmissionStatus_Initiated,
        SubmissionStatus_Canceled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SubmissionStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SubmissionStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SubmissionStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case SubmissionStatus_Invalid:
    case SubmissionStatus_Pending:
    case SubmissionStatus_Processing:
    case SubmissionStatus_Success:
    case SubmissionStatus_Failed:
    case SubmissionStatus_Initiated:
    case SubmissionStatus_Canceled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StandingOrderSubmission

@implementation StandingOrderSubmission

@dynamic id_p;
@dynamic standingOrderId;
@dynamic tokenId;
@dynamic createdAtMs;
@dynamic hasPayload, payload;
@dynamic status;

typedef struct StandingOrderSubmission__storage_ {
  uint32_t _has_storage_[1];
  SubmissionStatus status;
  NSString *id_p;
  NSString *standingOrderId;
  NSString *tokenId;
  StandingOrderBody *payload;
  int64_t createdAtMs;
} StandingOrderSubmission__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = StandingOrderSubmission_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StandingOrderSubmission__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "standingOrderId",
        .dataTypeSpecific.clazz = Nil,
        .number = StandingOrderSubmission_FieldNumber_StandingOrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StandingOrderSubmission__storage_, standingOrderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.clazz = Nil,
        .number = StandingOrderSubmission_FieldNumber_TokenId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StandingOrderSubmission__storage_, tokenId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAtMs",
        .dataTypeSpecific.clazz = Nil,
        .number = StandingOrderSubmission_FieldNumber_CreatedAtMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StandingOrderSubmission__storage_, createdAtMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "payload",
        .dataTypeSpecific.clazz = GPBObjCClass(StandingOrderBody),
        .number = StandingOrderSubmission_FieldNumber_Payload,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StandingOrderSubmission__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = SubmissionStatus_EnumDescriptor,
        .number = StandingOrderSubmission_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StandingOrderSubmission__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StandingOrderSubmission class]
                                     rootClass:[SubmissionRoot class]
                                          file:SubmissionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StandingOrderSubmission__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t StandingOrderSubmission_Status_RawValue(StandingOrderSubmission *message) {
  GPBDescriptor *descriptor = [StandingOrderSubmission descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StandingOrderSubmission_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetStandingOrderSubmission_Status_RawValue(StandingOrderSubmission *message, int32_t value) {
  GPBDescriptor *descriptor = [StandingOrderSubmission descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StandingOrderSubmission_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
