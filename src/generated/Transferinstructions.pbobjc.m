// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transferinstructions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Transferinstructions.pbobjc.h"
#import "Account.pbobjc.h"
#import "Address.pbobjc.h"
#import "Banklink.pbobjc.h"
#import "Security.pbobjc.h"
#import "Providerspecific.pbobjc.h"
#import "extensions/Message.pbobjc.h"
#import "extensions/Field.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - TransferinstructionsRoot

@implementation TransferinstructionsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[FieldRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - TransferinstructionsRoot_FileDescriptor

static GPBFileDescriptor *TransferinstructionsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.transferinstructions"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PaymentContext

GPBEnumDescriptor *PaymentContext_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidContext\000OtherContext\000BillPayment\000"
        "EcommerceGoods\000EcommerceServices\000PersonT"
        "oPerson\000";
    static const int32_t values[] = {
        PaymentContext_InvalidContext,
        PaymentContext_OtherContext,
        PaymentContext_BillPayment,
        PaymentContext_EcommerceGoods,
        PaymentContext_EcommerceServices,
        PaymentContext_PersonToPerson,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PaymentContext)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PaymentContext_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PaymentContext_IsValidValue(int32_t value__) {
  switch (value__) {
    case PaymentContext_InvalidContext:
    case PaymentContext_OtherContext:
    case PaymentContext_BillPayment:
    case PaymentContext_EcommerceGoods:
    case PaymentContext_EcommerceServices:
    case PaymentContext_PersonToPerson:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ChargeBearer

GPBEnumDescriptor *ChargeBearer_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidChargeBearer\000Cred\000Debt\000Shar\000Slev\000";
    static const int32_t values[] = {
        ChargeBearer_InvalidChargeBearer,
        ChargeBearer_Cred,
        ChargeBearer_Debt,
        ChargeBearer_Shar,
        ChargeBearer_Slev,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChargeBearer)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChargeBearer_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChargeBearer_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChargeBearer_InvalidChargeBearer:
    case ChargeBearer_Cred:
    case ChargeBearer_Debt:
    case ChargeBearer_Shar:
    case ChargeBearer_Slev:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CustomerData

@implementation CustomerData

@dynamic legalNamesArray, legalNamesArray_Count;
@dynamic hasAddress, address;

typedef struct CustomerData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *legalNamesArray;
  Address *address;
} CustomerData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "legalNamesArray",
        .dataTypeSpecific.className = NULL,
        .number = CustomerData_FieldNumber_LegalNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CustomerData__storage_, legalNamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = CustomerData_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CustomerData__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomerData class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomerData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferEndpoint

@implementation TransferEndpoint

@dynamic hasAccount, account;
@dynamic hasCustomerData, customerData;

typedef struct TransferEndpoint__storage_ {
  uint32_t _has_storage_[1];
  BankAccount *account;
  CustomerData *customerData;
} TransferEndpoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(BankAccount),
        .number = TransferEndpoint_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferEndpoint__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerData",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomerData),
        .number = TransferEndpoint_FieldNumber_CustomerData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferEndpoint__storage_, customerData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferEndpoint class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferEndpoint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination

@implementation TransferDestination

@dynamic destinationOneOfCase;
@dynamic token;
@dynamic sepa;
@dynamic sepaInstant;
@dynamic fasterPayments;
@dynamic ach;
@dynamic swift;
@dynamic elixir;
@dynamic expressElixir;
@dynamic blueCash;
@dynamic sorbnet;
@dynamic custom;
@dynamic chaps;
@dynamic bacs;
@dynamic target2;
@dynamic hsvp;
@dynamic hasCustomerData, customerData;

typedef struct TransferDestination__storage_ {
  uint32_t _has_storage_[2];
  TransferDestination_Token *token;
  TransferDestination_Sepa *sepa;
  TransferDestination_SepaInstant *sepaInstant;
  TransferDestination_FasterPayments *fasterPayments;
  TransferDestination_Ach *ach;
  TransferDestination_Swift *swift;
  TransferDestination_Elixir *elixir;
  TransferDestination_ExpressElixir *expressElixir;
  TransferDestination_BlueCash *blueCash;
  TransferDestination_Sorbnet *sorbnet;
  CustomerData *customerData;
  TransferDestination_Custom *custom;
  TransferDestination_Chaps *chaps;
  TransferDestination_Bacs *bacs;
  TransferDestination_Target2 *target2;
  TransferDestination_Hsvp *hsvp;
} TransferDestination__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Token),
        .number = TransferDestination_FieldNumber_Token,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sepa",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Sepa),
        .number = TransferDestination_FieldNumber_Sepa,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, sepa),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sepaInstant",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_SepaInstant),
        .number = TransferDestination_FieldNumber_SepaInstant,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, sepaInstant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fasterPayments",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_FasterPayments),
        .number = TransferDestination_FieldNumber_FasterPayments,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, fasterPayments),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ach",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Ach),
        .number = TransferDestination_FieldNumber_Ach,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, ach),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "swift",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Swift),
        .number = TransferDestination_FieldNumber_Swift,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, swift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "elixir",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Elixir),
        .number = TransferDestination_FieldNumber_Elixir,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, elixir),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expressElixir",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_ExpressElixir),
        .number = TransferDestination_FieldNumber_ExpressElixir,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, expressElixir),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blueCash",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_BlueCash),
        .number = TransferDestination_FieldNumber_BlueCash,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, blueCash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sorbnet",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Sorbnet),
        .number = TransferDestination_FieldNumber_Sorbnet,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, sorbnet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerData",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomerData),
        .number = TransferDestination_FieldNumber_CustomerData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, customerData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "custom",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Custom),
        .number = TransferDestination_FieldNumber_Custom,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, custom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chaps",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Chaps),
        .number = TransferDestination_FieldNumber_Chaps,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, chaps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bacs",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Bacs),
        .number = TransferDestination_FieldNumber_Bacs,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, bacs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "target2",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Target2),
        .number = TransferDestination_FieldNumber_Target2,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, target2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hsvp",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination_Hsvp),
        .number = TransferDestination_FieldNumber_Hsvp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransferDestination__storage_, hsvp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "destination",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TransferDestination_ClearDestinationOneOfCase(TransferDestination *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - TransferDestination_Token

@implementation TransferDestination_Token

@dynamic memberId;
@dynamic accountId;

typedef struct TransferDestination_Token__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
  NSString *accountId;
} TransferDestination_Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Token_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Token__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Token_FieldNumber_AccountId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_Token__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Token class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Token__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Custom

@implementation TransferDestination_Custom

@dynamic bankId;
@dynamic payload;

typedef struct TransferDestination_Custom__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
  NSString *payload;
} TransferDestination_Custom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Custom_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Custom__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Custom_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_Custom__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Custom class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Custom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Sepa

@implementation TransferDestination_Sepa

@dynamic bic;
@dynamic iban;

typedef struct TransferDestination_Sepa__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *iban;
} TransferDestination_Sepa__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Sepa_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Sepa__storage_, bic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iban",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Sepa_FieldNumber_Iban,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_Sepa__storage_, iban),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Sepa class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Sepa__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_SepaInstant

@implementation TransferDestination_SepaInstant

@dynamic iban;

typedef struct TransferDestination_SepaInstant__storage_ {
  uint32_t _has_storage_[1];
  NSString *iban;
} TransferDestination_SepaInstant__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iban",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_SepaInstant_FieldNumber_Iban,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_SepaInstant__storage_, iban),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_SepaInstant class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_SepaInstant__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_FasterPayments

@implementation TransferDestination_FasterPayments

@dynamic sortCode;
@dynamic accountNumber;

typedef struct TransferDestination_FasterPayments__storage_ {
  uint32_t _has_storage_[1];
  NSString *sortCode;
  NSString *accountNumber;
} TransferDestination_FasterPayments__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sortCode",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_FasterPayments_FieldNumber_SortCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_FasterPayments__storage_, sortCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_FasterPayments_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_FasterPayments__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_FasterPayments class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_FasterPayments__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Chaps

@implementation TransferDestination_Chaps

@dynamic sortCode;
@dynamic accountNumber;

typedef struct TransferDestination_Chaps__storage_ {
  uint32_t _has_storage_[1];
  NSString *sortCode;
  NSString *accountNumber;
} TransferDestination_Chaps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sortCode",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Chaps_FieldNumber_SortCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Chaps__storage_, sortCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Chaps_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_Chaps__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Chaps class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Chaps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Bacs

@implementation TransferDestination_Bacs

@dynamic sortCode;
@dynamic accountNumber;

typedef struct TransferDestination_Bacs__storage_ {
  uint32_t _has_storage_[1];
  NSString *sortCode;
  NSString *accountNumber;
} TransferDestination_Bacs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sortCode",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Bacs_FieldNumber_SortCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Bacs__storage_, sortCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Bacs_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_Bacs__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Bacs class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Bacs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Ach

@implementation TransferDestination_Ach

@dynamic routing;
@dynamic account;

typedef struct TransferDestination_Ach__storage_ {
  uint32_t _has_storage_[1];
  NSString *routing;
  NSString *account;
} TransferDestination_Ach__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "routing",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Ach_FieldNumber_Routing,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Ach__storage_, routing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Ach_FieldNumber_Account,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_Ach__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Ach class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Ach__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Swift

@implementation TransferDestination_Swift

@dynamic bic;
@dynamic account;

typedef struct TransferDestination_Swift__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *account;
} TransferDestination_Swift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Swift_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Swift__storage_, bic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Swift_FieldNumber_Account,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferDestination_Swift__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Swift class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Swift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Elixir

@implementation TransferDestination_Elixir

@dynamic accountNumber;

typedef struct TransferDestination_Elixir__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNumber;
} TransferDestination_Elixir__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Elixir_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Elixir__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Elixir class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Elixir__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_ExpressElixir

@implementation TransferDestination_ExpressElixir

@dynamic accountNumber;

typedef struct TransferDestination_ExpressElixir__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNumber;
} TransferDestination_ExpressElixir__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_ExpressElixir_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_ExpressElixir__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_ExpressElixir class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_ExpressElixir__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_BlueCash

@implementation TransferDestination_BlueCash

@dynamic accountNumber;

typedef struct TransferDestination_BlueCash__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNumber;
} TransferDestination_BlueCash__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_BlueCash_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_BlueCash__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_BlueCash class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_BlueCash__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Sorbnet

@implementation TransferDestination_Sorbnet

@dynamic accountNumber;

typedef struct TransferDestination_Sorbnet__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNumber;
} TransferDestination_Sorbnet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Sorbnet_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Sorbnet__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Sorbnet class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Sorbnet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Target2

@implementation TransferDestination_Target2

@dynamic iban;

typedef struct TransferDestination_Target2__storage_ {
  uint32_t _has_storage_[1];
  NSString *iban;
} TransferDestination_Target2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iban",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Target2_FieldNumber_Iban,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Target2__storage_, iban),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Target2 class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Target2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferDestination_Hsvp

@implementation TransferDestination_Hsvp

@dynamic iban;

typedef struct TransferDestination_Hsvp__storage_ {
  uint32_t _has_storage_[1];
  NSString *iban;
} TransferDestination_Hsvp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iban",
        .dataTypeSpecific.className = NULL,
        .number = TransferDestination_Hsvp_FieldNumber_Iban,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferDestination_Hsvp__storage_, iban),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferDestination_Hsvp class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferDestination_Hsvp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferDestination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferInstructions

@implementation TransferInstructions

@dynamic hasSource, source;
@dynamic destinationsArray, destinationsArray_Count;
@dynamic hasMetadata, metadata;
@dynamic transferDestinationsArray, transferDestinationsArray_Count;

typedef struct TransferInstructions__storage_ {
  uint32_t _has_storage_[1];
  TransferEndpoint *source;
  NSMutableArray *destinationsArray;
  TransferInstructions_Metadata *metadata;
  NSMutableArray *transferDestinationsArray;
} TransferInstructions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "source",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferEndpoint),
        .number = TransferInstructions_FieldNumber_Source,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferInstructions__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "destinationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferEndpoint),
        .number = TransferInstructions_FieldNumber_DestinationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferInstructions__storage_, destinationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferInstructions_Metadata),
        .number = TransferInstructions_FieldNumber_Metadata,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferInstructions__storage_, metadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transferDestinationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferDestination),
        .number = TransferInstructions_FieldNumber_TransferDestinationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferInstructions__storage_, transferDestinationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferInstructions class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferInstructions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferInstructions_Metadata

@implementation TransferInstructions_Metadata

@dynamic paymentContext;
@dynamic merchantCategoryCode;
@dynamic merchantCustomerId;
@dynamic hasDeliveryAddress, deliveryAddress;
@dynamic hasProviderTransferMetadata, providerTransferMetadata;
@dynamic chargeBearer;
@dynamic ultimateCreditor;
@dynamic ultimateDebtor;
@dynamic purposeCode;

typedef struct TransferInstructions_Metadata__storage_ {
  uint32_t _has_storage_[1];
  PaymentContext paymentContext;
  ChargeBearer chargeBearer;
  NSString *merchantCategoryCode;
  NSString *merchantCustomerId;
  Address *deliveryAddress;
  ProviderTransferMetadata *providerTransferMetadata;
  NSString *ultimateCreditor;
  NSString *ultimateDebtor;
  NSString *purposeCode;
} TransferInstructions_Metadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentContext",
        .dataTypeSpecific.enumDescFunc = PaymentContext_EnumDescriptor,
        .number = TransferInstructions_Metadata_FieldNumber_PaymentContext,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, paymentContext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "merchantCategoryCode",
        .dataTypeSpecific.className = NULL,
        .number = TransferInstructions_Metadata_FieldNumber_MerchantCategoryCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, merchantCategoryCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "merchantCustomerId",
        .dataTypeSpecific.className = NULL,
        .number = TransferInstructions_Metadata_FieldNumber_MerchantCustomerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, merchantCustomerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deliveryAddress",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = TransferInstructions_Metadata_FieldNumber_DeliveryAddress,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, deliveryAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "providerTransferMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(ProviderTransferMetadata),
        .number = TransferInstructions_Metadata_FieldNumber_ProviderTransferMetadata,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, providerTransferMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chargeBearer",
        .dataTypeSpecific.enumDescFunc = ChargeBearer_EnumDescriptor,
        .number = TransferInstructions_Metadata_FieldNumber_ChargeBearer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, chargeBearer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ultimateCreditor",
        .dataTypeSpecific.className = NULL,
        .number = TransferInstructions_Metadata_FieldNumber_UltimateCreditor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, ultimateCreditor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ultimateDebtor",
        .dataTypeSpecific.className = NULL,
        .number = TransferInstructions_Metadata_FieldNumber_UltimateDebtor,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, ultimateDebtor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "purposeCode",
        .dataTypeSpecific.className = NULL,
        .number = TransferInstructions_Metadata_FieldNumber_PurposeCode,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TransferInstructions_Metadata__storage_, purposeCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferInstructions_Metadata class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferInstructions_Metadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\007\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TransferInstructions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TransferInstructions_Metadata_PaymentContext_RawValue(TransferInstructions_Metadata *message) {
  GPBDescriptor *descriptor = [TransferInstructions_Metadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferInstructions_Metadata_FieldNumber_PaymentContext];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransferInstructions_Metadata_PaymentContext_RawValue(TransferInstructions_Metadata *message, int32_t value) {
  GPBDescriptor *descriptor = [TransferInstructions_Metadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferInstructions_Metadata_FieldNumber_PaymentContext];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t TransferInstructions_Metadata_ChargeBearer_RawValue(TransferInstructions_Metadata *message) {
  GPBDescriptor *descriptor = [TransferInstructions_Metadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferInstructions_Metadata_FieldNumber_ChargeBearer];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransferInstructions_Metadata_ChargeBearer_RawValue(TransferInstructions_Metadata *message, int32_t value) {
  GPBDescriptor *descriptor = [TransferInstructions_Metadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferInstructions_Metadata_FieldNumber_ChargeBearer];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
