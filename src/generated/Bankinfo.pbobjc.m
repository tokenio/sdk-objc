// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankinfo.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Bankinfo.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BankinfoRoot

@implementation BankinfoRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - BankinfoRoot_FileDescriptor

static GPBFileDescriptor *BankinfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.bank"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Bank

@implementation Bank

@dynamic id_p;
@dynamic name;
@dynamic logoUri;
@dynamic fullLogoUri;
@dynamic supportsAppless;
@dynamic supportsPayments;

typedef struct Bank__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *logoUri;
  NSString *fullLogoUri;
} Bank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Bank_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Bank__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Bank_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Bank__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logoUri",
        .dataTypeSpecific.className = NULL,
        .number = Bank_FieldNumber_LogoUri,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Bank__storage_, logoUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fullLogoUri",
        .dataTypeSpecific.className = NULL,
        .number = Bank_FieldNumber_FullLogoUri,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Bank__storage_, fullLogoUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "supportsAppless",
        .dataTypeSpecific.className = NULL,
        .number = Bank_FieldNumber_SupportsAppless,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "supportsPayments",
        .dataTypeSpecific.className = NULL,
        .number = Bank_FieldNumber_SupportsPayments,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Bank class]
                                     rootClass:[BankinfoRoot class]
                                          file:BankinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Bank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BankInfo

@implementation BankInfo

@dynamic linkingUri;
@dynamic redirectUriRegex;

typedef struct BankInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *linkingUri;
  NSString *redirectUriRegex;
} BankInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linkingUri",
        .dataTypeSpecific.className = NULL,
        .number = BankInfo_FieldNumber_LinkingUri,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BankInfo__storage_, linkingUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redirectUriRegex",
        .dataTypeSpecific.className = NULL,
        .number = BankInfo_FieldNumber_RedirectUriRegex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BankInfo__storage_, redirectUriRegex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BankInfo class]
                                     rootClass:[BankinfoRoot class]
                                          file:BankinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BankInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
