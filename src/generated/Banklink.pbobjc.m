// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: banklink.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Banklink.pbobjc.h"
#import "Security.pbobjc.h"
#import "extensions/Field.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SealedMessage);

#pragma mark - BanklinkRoot

@implementation BanklinkRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[FieldRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - BanklinkRoot_FileDescriptor

static GPBFileDescriptor *BanklinkRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.banklink"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum AccountLinkingStatus

GPBEnumDescriptor *AccountLinkingStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Success\000FailureBankAuthorization"
        "Required\000";
    static const int32_t values[] = {
        AccountLinkingStatus_Invalid,
        AccountLinkingStatus_Success,
        AccountLinkingStatus_FailureBankAuthorizationRequired,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AccountLinkingStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AccountLinkingStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AccountLinkingStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case AccountLinkingStatus_Invalid:
    case AccountLinkingStatus_Success:
    case AccountLinkingStatus_FailureBankAuthorizationRequired:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BankAuthorization

@implementation BankAuthorization

@dynamic bankId;
@dynamic accountsArray, accountsArray_Count;

typedef struct BankAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
  NSMutableArray *accountsArray;
} BankAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.clazz = Nil,
        .number = BankAuthorization_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BankAuthorization__storage_, bankId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SealedMessage),
        .number = BankAuthorization_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BankAuthorization__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BankAuthorization class]
                                     rootClass:[BanklinkRoot class]
                                          file:BanklinkRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BankAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OauthBankAuthorization

@implementation OauthBankAuthorization

@dynamic bankId;
@dynamic accessToken;

typedef struct OauthBankAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
  NSString *accessToken;
} OauthBankAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.clazz = Nil,
        .number = OauthBankAuthorization_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OauthBankAuthorization__storage_, bankId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessToken",
        .dataTypeSpecific.clazz = Nil,
        .number = OauthBankAuthorization_FieldNumber_AccessToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OauthBankAuthorization__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OauthBankAuthorization class]
                                     rootClass:[BanklinkRoot class]
                                          file:BanklinkRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OauthBankAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
