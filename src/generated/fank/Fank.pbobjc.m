// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fank/fank.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "fank/Fank.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "Alias.pbobjc.h"
#import "Member.pbobjc.h"
#import "Money.pbobjc.h"
#import "Banklink.pbobjc.h"
#import "Notification.pbobjc.h"
#import "Security.pbobjc.h"
#import "Token.pbobjc.h"
#import "extensions/Field.pbobjc.h"
#import "extensions/Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Alias);
GPBObjCClassDeclaration(FankAccount);
GPBObjCClassDeclaration(FankClient);
GPBObjCClassDeclaration(Money);
GPBObjCClassDeclaration(Notification);
GPBObjCClassDeclaration(Signature);
GPBObjCClassDeclaration(TokenPayload);

#pragma mark - FankRoot

@implementation FankRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[FieldRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - FankRoot_FileDescriptor

static GPBFileDescriptor *FankRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.bankapi"
                                                 objcPrefix:@"Fank"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FankClient

@implementation FankClient

@dynamic id_p;
@dynamic firstName;
@dynamic lastName;

typedef struct FankClient__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *firstName;
  NSString *lastName;
} FankClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = FankClient_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankClient__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.clazz = Nil,
        .number = FankClient_FieldNumber_FirstName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankClient__storage_, firstName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.clazz = Nil,
        .number = FankClient_FieldNumber_LastName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankClient__storage_, lastName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankClient class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankClient__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAccount

@implementation FankAccount

@dynamic name;
@dynamic accountNumber;
@dynamic hasBalance, balance;

typedef struct FankAccount__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *accountNumber;
  Money *balance;
} FankAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAccount_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAccount__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAccount_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAccount__storage_, accountNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.clazz = GPBObjCClass(Money),
        .number = FankAccount_FieldNumber_Balance,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankAccount__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAccount class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddClientRequest

@implementation FankAddClientRequest

@dynamic bic;
@dynamic firstName;
@dynamic lastName;

typedef struct FankAddClientRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *firstName;
  NSString *lastName;
} FankAddClientRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddClientRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddClientRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddClientRequest_FieldNumber_FirstName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAddClientRequest__storage_, firstName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddClientRequest_FieldNumber_LastName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankAddClientRequest__storage_, lastName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddClientRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddClientRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddClientResponse

@implementation FankAddClientResponse

@dynamic hasClient, client;

typedef struct FankAddClientResponse__storage_ {
  uint32_t _has_storage_[1];
  FankClient *client;
} FankAddClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.clazz = GPBObjCClass(FankClient),
        .number = FankAddClientResponse_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddClientResponse__storage_, client),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddClientResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddClientResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetClientRequest

@implementation FankGetClientRequest

@dynamic bic;
@dynamic clientId;

typedef struct FankGetClientRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *clientId;
} FankGetClientRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetClientRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetClientRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetClientRequest_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetClientRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetClientRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetClientRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetClientResponse

@implementation FankGetClientResponse

@dynamic hasClient, client;

typedef struct FankGetClientResponse__storage_ {
  uint32_t _has_storage_[1];
  FankClient *client;
} FankGetClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.clazz = GPBObjCClass(FankClient),
        .number = FankGetClientResponse_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetClientResponse__storage_, client),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetClientResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetClientResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddAccountRequest

@implementation FankAddAccountRequest

@dynamic bic;
@dynamic clientId;
@dynamic name;
@dynamic accountNumber;
@dynamic hasBalance, balance;
@dynamic profile;

typedef struct FankAddAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *clientId;
  NSString *name;
  NSString *accountNumber;
  Money *balance;
  NSString *profile;
} FankAddAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddAccountRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddAccountRequest_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddAccountRequest_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddAccountRequest_FieldNumber_AccountNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, accountNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.clazz = GPBObjCClass(Money),
        .number = FankAddAccountRequest_FieldNumber_Balance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "profile",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAddAccountRequest_FieldNumber_Profile,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, profile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddAccountRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddAccountRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddAccountResponse

@implementation FankAddAccountResponse

@dynamic hasAccount, account;

typedef struct FankAddAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  FankAccount *account;
} FankAddAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.clazz = GPBObjCClass(FankAccount),
        .number = FankAddAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddAccountResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddAccountResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountsRequest

@implementation FankGetAccountsRequest

@dynamic bic;
@dynamic clientId;

typedef struct FankGetAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *clientId;
} FankGetAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAccountsRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAccountsRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAccountsRequest_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetAccountsRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountsRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountsResponse

@implementation FankGetAccountsResponse

@dynamic accountArray, accountArray_Count;

typedef struct FankGetAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountArray;
} FankGetAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(FankAccount),
        .number = FankGetAccountsResponse_FieldNumber_AccountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FankGetAccountsResponse__storage_, accountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountsResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountRequest

@implementation FankGetAccountRequest

@dynamic bic;
@dynamic clientId;
@dynamic accountNumber;

typedef struct FankGetAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *clientId;
  NSString *accountNumber;
} FankGetAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAccountRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAccountRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAccountRequest_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetAccountRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAccountRequest_FieldNumber_AccountNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankGetAccountRequest__storage_, accountNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountResponse

@implementation FankGetAccountResponse

@dynamic hasAccount, account;

typedef struct FankGetAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  FankAccount *account;
} FankGetAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.clazz = GPBObjCClass(FankAccount),
        .number = FankGetAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAuthorizeLinkAccountsRequest

@implementation FankAuthorizeLinkAccountsRequest

@dynamic bic;
@dynamic memberId;
@dynamic clientId;
@dynamic accountsArray, accountsArray_Count;

typedef struct FankAuthorizeLinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *memberId;
  NSString *clientId;
  NSMutableArray *accountsArray;
} FankAuthorizeLinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAuthorizeLinkAccountsRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAuthorizeLinkAccountsRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAuthorizeLinkAccountsRequest_FieldNumber_MemberId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAuthorizeLinkAccountsRequest__storage_, memberId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAuthorizeLinkAccountsRequest_FieldNumber_ClientId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankAuthorizeLinkAccountsRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = FankAuthorizeLinkAccountsRequest_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FankAuthorizeLinkAccountsRequest__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAuthorizeLinkAccountsRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAuthorizeLinkAccountsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetNotificationRequest

@implementation FankGetNotificationRequest

@dynamic subscriberId;
@dynamic notificationId;

typedef struct FankGetNotificationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
  NSString *notificationId;
} FankGetNotificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetNotificationRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetNotificationRequest__storage_, subscriberId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notificationId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetNotificationRequest_FieldNumber_NotificationId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetNotificationRequest__storage_, notificationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetNotificationRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetNotificationRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetNotificationResponse

@implementation FankGetNotificationResponse

@dynamic hasNotification, notification;

typedef struct FankGetNotificationResponse__storage_ {
  uint32_t _has_storage_[1];
  Notification *notification;
} FankGetNotificationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notification",
        .dataTypeSpecific.clazz = GPBObjCClass(Notification),
        .number = FankGetNotificationResponse_FieldNumber_Notification,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetNotificationResponse__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetNotificationResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetNotificationResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetNotificationsRequest

@implementation FankGetNotificationsRequest

@dynamic subscriberId;

typedef struct FankGetNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
} FankGetNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetNotificationsRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetNotificationsRequest__storage_, subscriberId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetNotificationsRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetNotificationsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetNotificationsResponse

@implementation FankGetNotificationsResponse

@dynamic notificationsArray, notificationsArray_Count;

typedef struct FankGetNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *notificationsArray;
} FankGetNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notificationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Notification),
        .number = FankGetNotificationsResponse_FieldNumber_NotificationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FankGetNotificationsResponse__storage_, notificationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetNotificationsResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetNotificationsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetOauthAccessTokenRequest

@implementation FankGetOauthAccessTokenRequest

@dynamic bic;
@dynamic profile;
@dynamic memberId;
@dynamic accountsArray, accountsArray_Count;
@dynamic clientId;

typedef struct FankGetOauthAccessTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *profile;
  NSString *memberId;
  NSMutableArray *accountsArray;
  NSString *clientId;
} FankGetOauthAccessTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetOauthAccessTokenRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetOauthAccessTokenRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "profile",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetOauthAccessTokenRequest_FieldNumber_Profile,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetOauthAccessTokenRequest__storage_, profile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetOauthAccessTokenRequest_FieldNumber_MemberId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankGetOauthAccessTokenRequest__storage_, memberId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(FankAccount),
        .number = FankGetOauthAccessTokenRequest_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FankGetOauthAccessTokenRequest__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetOauthAccessTokenRequest_FieldNumber_ClientId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FankGetOauthAccessTokenRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetOauthAccessTokenRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetOauthAccessTokenRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetOauthAccessTokenResponse

@implementation FankGetOauthAccessTokenResponse

@dynamic accessToken;
@dynamic expiresInMs;

typedef struct FankGetOauthAccessTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *accessToken;
  int64_t expiresInMs;
} FankGetOauthAccessTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetOauthAccessTokenResponse_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetOauthAccessTokenResponse__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresInMs",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetOauthAccessTokenResponse_FieldNumber_ExpiresInMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetOauthAccessTokenResponse__storage_, expiresInMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetOauthAccessTokenResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetOauthAccessTokenResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankVerifyAliasRequest

@implementation FankVerifyAliasRequest

@dynamic bic;
@dynamic memberId;
@dynamic hasAlias, alias;

typedef struct FankVerifyAliasRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *memberId;
  Alias *alias;
} FankVerifyAliasRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankVerifyAliasRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankVerifyAliasRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankVerifyAliasRequest_FieldNumber_MemberId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankVerifyAliasRequest__storage_, memberId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.clazz = GPBObjCClass(Alias),
        .number = FankVerifyAliasRequest_FieldNumber_Alias,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankVerifyAliasRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankVerifyAliasRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankVerifyAliasRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankVerifyAliasResponse

@implementation FankVerifyAliasResponse


typedef struct FankVerifyAliasResponse__storage_ {
  uint32_t _has_storage_[1];
} FankVerifyAliasResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankVerifyAliasResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FankVerifyAliasResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAuthRequestPayloadRequest

@implementation FankGetAuthRequestPayloadRequest

@dynamic bic;
@dynamic authRequestId;

typedef struct FankGetAuthRequestPayloadRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *authRequestId;
} FankGetAuthRequestPayloadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAuthRequestPayloadRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAuthRequestPayloadRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authRequestId",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAuthRequestPayloadRequest_FieldNumber_AuthRequestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetAuthRequestPayloadRequest__storage_, authRequestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAuthRequestPayloadRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAuthRequestPayloadRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAuthRequestPayloadResponse

@implementation FankGetAuthRequestPayloadResponse

@dynamic hasPayload, payload;
@dynamic sourceAccountHash;

typedef struct FankGetAuthRequestPayloadResponse__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *payload;
  NSString *sourceAccountHash;
} FankGetAuthRequestPayloadResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.clazz = GPBObjCClass(TokenPayload),
        .number = FankGetAuthRequestPayloadResponse_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAuthRequestPayloadResponse__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sourceAccountHash",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAuthRequestPayloadResponse_FieldNumber_SourceAccountHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetAuthRequestPayloadResponse__storage_, sourceAccountHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAuthRequestPayloadResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAuthRequestPayloadResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAuthRequestSignatureRequest

@implementation FankGetAuthRequestSignatureRequest

@dynamic bic;
@dynamic sourceAccountHash;
@dynamic accountNumber;

typedef struct FankGetAuthRequestSignatureRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *sourceAccountHash;
  NSString *accountNumber;
} FankGetAuthRequestSignatureRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAuthRequestSignatureRequest_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAuthRequestSignatureRequest__storage_, bic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceAccountHash",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAuthRequestSignatureRequest_FieldNumber_SourceAccountHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetAuthRequestSignatureRequest__storage_, sourceAccountHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = FankGetAuthRequestSignatureRequest_FieldNumber_AccountNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankGetAuthRequestSignatureRequest__storage_, accountNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAuthRequestSignatureRequest class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAuthRequestSignatureRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAuthRequestSignatureResponse

@implementation FankGetAuthRequestSignatureResponse

@dynamic hasBankSignature, bankSignature;

typedef struct FankGetAuthRequestSignatureResponse__storage_ {
  uint32_t _has_storage_[1];
  Signature *bankSignature;
} FankGetAuthRequestSignatureResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankSignature",
        .dataTypeSpecific.clazz = GPBObjCClass(Signature),
        .number = FankGetAuthRequestSignatureResponse_FieldNumber_BankSignature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAuthRequestSignatureResponse__storage_, bankSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAuthRequestSignatureResponse class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAuthRequestSignatureResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
