// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polishapi.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Polishapi.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - POLISHAPIPolishapiRoot

@implementation POLISHAPIPolishapiRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - POLISHAPIPolishapiRoot_FileDescriptor

static GPBFileDescriptor *POLISHAPIPolishapiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.providerspecific.polishapi"
                                                 objcPrefix:@"POLISHAPI"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum POLISHAPIDeliveryMode

GPBEnumDescriptor *POLISHAPIDeliveryMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidDeliveryMode\000StandardD2\000StandardD"
        "1\000UrgentD1\000ExpressD0\000";
    static const int32_t values[] = {
        POLISHAPIDeliveryMode_InvalidDeliveryMode,
        POLISHAPIDeliveryMode_StandardD2,
        POLISHAPIDeliveryMode_StandardD1,
        POLISHAPIDeliveryMode_UrgentD1,
        POLISHAPIDeliveryMode_ExpressD0,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POLISHAPIDeliveryMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POLISHAPIDeliveryMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POLISHAPIDeliveryMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case POLISHAPIDeliveryMode_InvalidDeliveryMode:
    case POLISHAPIDeliveryMode_StandardD2:
    case POLISHAPIDeliveryMode_StandardD1:
    case POLISHAPIDeliveryMode_UrgentD1:
    case POLISHAPIDeliveryMode_ExpressD0:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum POLISHAPITypeOfRelation

GPBEnumDescriptor *POLISHAPITypeOfRelation_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidTypeOfRelation\000Owner\000Borrower\000Gua"
        "rantor\000ProxyOwner\000Beneficiary\000Trustee\000";
    static const int32_t values[] = {
        POLISHAPITypeOfRelation_InvalidTypeOfRelation,
        POLISHAPITypeOfRelation_Owner,
        POLISHAPITypeOfRelation_Borrower,
        POLISHAPITypeOfRelation_Guarantor,
        POLISHAPITypeOfRelation_ProxyOwner,
        POLISHAPITypeOfRelation_Beneficiary,
        POLISHAPITypeOfRelation_Trustee,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POLISHAPITypeOfRelation)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POLISHAPITypeOfRelation_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POLISHAPITypeOfRelation_IsValidValue(int32_t value__) {
  switch (value__) {
    case POLISHAPITypeOfRelation_InvalidTypeOfRelation:
    case POLISHAPITypeOfRelation_Owner:
    case POLISHAPITypeOfRelation_Borrower:
    case POLISHAPITypeOfRelation_Guarantor:
    case POLISHAPITypeOfRelation_ProxyOwner:
    case POLISHAPITypeOfRelation_Beneficiary:
    case POLISHAPITypeOfRelation_Trustee:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum POLISHAPITypeOfProxy

GPBEnumDescriptor *POLISHAPITypeOfProxy_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidTypeOfProxy\000General\000Special\000Admin"
        "istrator\000User\000";
    static const int32_t values[] = {
        POLISHAPITypeOfProxy_InvalidTypeOfProxy,
        POLISHAPITypeOfProxy_General,
        POLISHAPITypeOfProxy_Special,
        POLISHAPITypeOfProxy_Administrator,
        POLISHAPITypeOfProxy_User,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POLISHAPITypeOfProxy)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POLISHAPITypeOfProxy_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POLISHAPITypeOfProxy_IsValidValue(int32_t value__) {
  switch (value__) {
    case POLISHAPITypeOfProxy_InvalidTypeOfProxy:
    case POLISHAPITypeOfProxy_General:
    case POLISHAPITypeOfProxy_Special:
    case POLISHAPITypeOfProxy_Administrator:
    case POLISHAPITypeOfProxy_User:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum POLISHAPIAccountHolderType

GPBEnumDescriptor *POLISHAPIAccountHolderType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InvalidAccountHolderType\000Individual\000Corp"
        "oration\000";
    static const int32_t values[] = {
        POLISHAPIAccountHolderType_InvalidAccountHolderType,
        POLISHAPIAccountHolderType_Individual,
        POLISHAPIAccountHolderType_Corporation,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POLISHAPIAccountHolderType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POLISHAPIAccountHolderType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POLISHAPIAccountHolderType_IsValidValue(int32_t value__) {
  switch (value__) {
    case POLISHAPIAccountHolderType_InvalidAccountHolderType:
    case POLISHAPIAccountHolderType_Individual:
    case POLISHAPIAccountHolderType_Corporation:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - POLISHAPIPolishApiAccountDetails

@implementation POLISHAPIPolishApiAccountDetails

@dynamic hasNameAddress, nameAddress;
@dynamic accountHolderType;
@dynamic accountNameClient;
@dynamic currency;
@dynamic hasBank, bank;
@dynamic psuRelationsArray, psuRelationsArray_Count;
@dynamic auxData, auxData_Count;

typedef struct POLISHAPIPolishApiAccountDetails__storage_ {
  uint32_t _has_storage_[1];
  POLISHAPIAccountHolderType accountHolderType;
  POLISHAPINameAddress *nameAddress;
  NSString *accountNameClient;
  NSString *currency;
  POLISHAPIBankAccountInfo *bank;
  NSMutableArray *psuRelationsArray;
  NSMutableDictionary *auxData;
} POLISHAPIPolishApiAccountDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameAddress",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPINameAddress),
        .number = POLISHAPIPolishApiAccountDetails_FieldNumber_NameAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiAccountDetails__storage_, nameAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accountHolderType",
        .dataTypeSpecific.enumDescFunc = POLISHAPIAccountHolderType_EnumDescriptor,
        .number = POLISHAPIPolishApiAccountDetails_FieldNumber_AccountHolderType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiAccountDetails__storage_, accountHolderType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "accountNameClient",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiAccountDetails_FieldNumber_AccountNameClient,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiAccountDetails__storage_, accountNameClient),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiAccountDetails_FieldNumber_Currency,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiAccountDetails__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bank",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPIBankAccountInfo),
        .number = POLISHAPIPolishApiAccountDetails_FieldNumber_Bank,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiAccountDetails__storage_, bank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "psuRelationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPIAccountPsuRelation),
        .number = POLISHAPIPolishApiAccountDetails_FieldNumber_PsuRelationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiAccountDetails__storage_, psuRelationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "auxData",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiAccountDetails_FieldNumber_AuxData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiAccountDetails__storage_, auxData),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPIPolishApiAccountDetails class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPIPolishApiAccountDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\007\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POLISHAPIPolishApiAccountDetails_AccountHolderType_RawValue(POLISHAPIPolishApiAccountDetails *message) {
  GPBDescriptor *descriptor = [POLISHAPIPolishApiAccountDetails descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIPolishApiAccountDetails_FieldNumber_AccountHolderType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOLISHAPIPolishApiAccountDetails_AccountHolderType_RawValue(POLISHAPIPolishApiAccountDetails *message, int32_t value) {
  GPBDescriptor *descriptor = [POLISHAPIPolishApiAccountDetails descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIPolishApiAccountDetails_FieldNumber_AccountHolderType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - POLISHAPIPolishApiTransactionDetails

@implementation POLISHAPIPolishApiTransactionDetails

@dynamic transactionType;
@dynamic mcc;
@dynamic auxData, auxData_Count;
@dynamic hasInitiator, initiator;
@dynamic hasSender, sender;
@dynamic hasRecipient, recipient;
@dynamic tradeDate;
@dynamic postTransactionBalance;
@dynamic rejectionDate;
@dynamic rejectionReason;
@dynamic hasZusInfo, zusInfo;
@dynamic hasTaxInfo, taxInfo;
@dynamic hasCardInfo, cardInfo;
@dynamic currencyDate;
@dynamic transactionRateArray, transactionRateArray_Count;
@dynamic baseCurrency;
@dynamic accountBaseCurrency;
@dynamic usedPaymentInstrumentId;
@dynamic tppTransactionId;
@dynamic tppName;
@dynamic holdExpirationDate;

typedef struct POLISHAPIPolishApiTransactionDetails__storage_ {
  uint32_t _has_storage_[1];
  NSString *transactionType;
  NSString *mcc;
  NSMutableDictionary *auxData;
  POLISHAPINameAddress *initiator;
  POLISHAPISenderRecipient *sender;
  POLISHAPISenderRecipient *recipient;
  NSString *tradeDate;
  NSString *postTransactionBalance;
  NSString *rejectionDate;
  NSString *rejectionReason;
  POLISHAPITransactionInfoZus *zusInfo;
  POLISHAPITransactionInfoTax *taxInfo;
  POLISHAPITransactionInfoCard *cardInfo;
  NSString *currencyDate;
  NSMutableArray *transactionRateArray;
  NSString *baseCurrency;
  NSString *accountBaseCurrency;
  NSString *usedPaymentInstrumentId;
  NSString *tppTransactionId;
  NSString *tppName;
  NSString *holdExpirationDate;
} POLISHAPIPolishApiTransactionDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionType",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_TransactionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, transactionType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mcc",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_Mcc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, mcc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "auxData",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_AuxData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, auxData),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "initiator",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPINameAddress),
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_Initiator,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, initiator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sender",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPISenderRecipient),
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_Sender,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "recipient",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPISenderRecipient),
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_Recipient,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, recipient),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tradeDate",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_TradeDate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, tradeDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "postTransactionBalance",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_PostTransactionBalance,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, postTransactionBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rejectionDate",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_RejectionDate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, rejectionDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rejectionReason",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_RejectionReason,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, rejectionReason),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zusInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPITransactionInfoZus),
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_ZusInfo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, zusInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "taxInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPITransactionInfoTax),
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_TaxInfo,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, taxInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPITransactionInfoCard),
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_CardInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, cardInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currencyDate",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_CurrencyDate,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, currencyDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionRateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPICurrencyRate),
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_TransactionRateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, transactionRateArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseCurrency",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_BaseCurrency,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, baseCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountBaseCurrency",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_AccountBaseCurrency,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, accountBaseCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usedPaymentInstrumentId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_UsedPaymentInstrumentId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, usedPaymentInstrumentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tppTransactionId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_TppTransactionId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, tppTransactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tppName",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_TppName,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, tppName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "holdExpirationDate",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransactionDetails_FieldNumber_HoldExpirationDate,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransactionDetails__storage_, holdExpirationDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPIPolishApiTransactionDetails class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPIPolishApiTransactionDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPIPolishApiTransferMetadata

@implementation POLISHAPIPolishApiTransferMetadata

@dynamic deliveryMode;
@dynamic hold;

typedef struct POLISHAPIPolishApiTransferMetadata__storage_ {
  uint32_t _has_storage_[1];
  POLISHAPIDeliveryMode deliveryMode;
} POLISHAPIPolishApiTransferMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deliveryMode",
        .dataTypeSpecific.enumDescFunc = POLISHAPIDeliveryMode_EnumDescriptor,
        .number = POLISHAPIPolishApiTransferMetadata_FieldNumber_DeliveryMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPIPolishApiTransferMetadata__storage_, deliveryMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hold",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPolishApiTransferMetadata_FieldNumber_Hold,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPIPolishApiTransferMetadata class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPIPolishApiTransferMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POLISHAPIPolishApiTransferMetadata_DeliveryMode_RawValue(POLISHAPIPolishApiTransferMetadata *message) {
  GPBDescriptor *descriptor = [POLISHAPIPolishApiTransferMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIPolishApiTransferMetadata_FieldNumber_DeliveryMode];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOLISHAPIPolishApiTransferMetadata_DeliveryMode_RawValue(POLISHAPIPolishApiTransferMetadata *message, int32_t value) {
  GPBDescriptor *descriptor = [POLISHAPIPolishApiTransferMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIPolishApiTransferMetadata_FieldNumber_DeliveryMode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - POLISHAPISenderRecipient

@implementation POLISHAPISenderRecipient

@dynamic accountNumber;
@dynamic accountMassPayment;
@dynamic hasBank, bank;
@dynamic hasNameAddress, nameAddress;

typedef struct POLISHAPISenderRecipient__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNumber;
  NSString *accountMassPayment;
  POLISHAPIBank *bank;
  POLISHAPINameAddress *nameAddress;
} POLISHAPISenderRecipient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPISenderRecipient_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPISenderRecipient__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountMassPayment",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPISenderRecipient_FieldNumber_AccountMassPayment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPISenderRecipient__storage_, accountMassPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bank",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPIBank),
        .number = POLISHAPISenderRecipient_FieldNumber_Bank,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPISenderRecipient__storage_, bank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nameAddress",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPINameAddress),
        .number = POLISHAPISenderRecipient_FieldNumber_NameAddress,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POLISHAPISenderRecipient__storage_, nameAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPISenderRecipient class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPISenderRecipient__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPIAccountPsuRelation

@implementation POLISHAPIAccountPsuRelation

@dynamic typeOfRelation;
@dynamic typeOfProxy;
@dynamic stake;

typedef struct POLISHAPIAccountPsuRelation__storage_ {
  uint32_t _has_storage_[1];
  POLISHAPITypeOfRelation typeOfRelation;
  POLISHAPITypeOfProxy typeOfProxy;
  int32_t stake;
} POLISHAPIAccountPsuRelation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeOfRelation",
        .dataTypeSpecific.enumDescFunc = POLISHAPITypeOfRelation_EnumDescriptor,
        .number = POLISHAPIAccountPsuRelation_FieldNumber_TypeOfRelation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPIAccountPsuRelation__storage_, typeOfRelation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "typeOfProxy",
        .dataTypeSpecific.enumDescFunc = POLISHAPITypeOfProxy_EnumDescriptor,
        .number = POLISHAPIAccountPsuRelation_FieldNumber_TypeOfProxy,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPIAccountPsuRelation__storage_, typeOfProxy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "stake",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIAccountPsuRelation_FieldNumber_Stake,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPIAccountPsuRelation__storage_, stake),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPIAccountPsuRelation class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPIAccountPsuRelation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POLISHAPIAccountPsuRelation_TypeOfRelation_RawValue(POLISHAPIAccountPsuRelation *message) {
  GPBDescriptor *descriptor = [POLISHAPIAccountPsuRelation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIAccountPsuRelation_FieldNumber_TypeOfRelation];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOLISHAPIAccountPsuRelation_TypeOfRelation_RawValue(POLISHAPIAccountPsuRelation *message, int32_t value) {
  GPBDescriptor *descriptor = [POLISHAPIAccountPsuRelation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIAccountPsuRelation_FieldNumber_TypeOfRelation];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t POLISHAPIAccountPsuRelation_TypeOfProxy_RawValue(POLISHAPIAccountPsuRelation *message) {
  GPBDescriptor *descriptor = [POLISHAPIAccountPsuRelation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIAccountPsuRelation_FieldNumber_TypeOfProxy];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOLISHAPIAccountPsuRelation_TypeOfProxy_RawValue(POLISHAPIAccountPsuRelation *message, int32_t value) {
  GPBDescriptor *descriptor = [POLISHAPIAccountPsuRelation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POLISHAPIAccountPsuRelation_FieldNumber_TypeOfProxy];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - POLISHAPINameAddress

@implementation POLISHAPINameAddress

@dynamic valueArray, valueArray_Count;

typedef struct POLISHAPINameAddress__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *valueArray;
} POLISHAPINameAddress__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valueArray",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPINameAddress_FieldNumber_ValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POLISHAPINameAddress__storage_, valueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPINameAddress class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPINameAddress__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPIBankAccountInfo

@implementation POLISHAPIBankAccountInfo

@dynamic bicOrSwift;
@dynamic name;
@dynamic addressArray, addressArray_Count;

typedef struct POLISHAPIBankAccountInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *bicOrSwift;
  NSString *name;
  NSMutableArray *addressArray;
} POLISHAPIBankAccountInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bicOrSwift",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBankAccountInfo_FieldNumber_BicOrSwift,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPIBankAccountInfo__storage_, bicOrSwift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBankAccountInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPIBankAccountInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressArray",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBankAccountInfo_FieldNumber_AddressArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POLISHAPIBankAccountInfo__storage_, addressArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPIBankAccountInfo class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPIBankAccountInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPIBank

@implementation POLISHAPIBank

@dynamic bicOrSwift;
@dynamic name;
@dynamic code;
@dynamic countryCode;
@dynamic addressArray, addressArray_Count;

typedef struct POLISHAPIBank__storage_ {
  uint32_t _has_storage_[1];
  NSString *bicOrSwift;
  NSString *name;
  NSString *code;
  NSString *countryCode;
  NSMutableArray *addressArray;
} POLISHAPIBank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bicOrSwift",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBank_FieldNumber_BicOrSwift,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPIBank__storage_, bicOrSwift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBank_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPIBank__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBank_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPIBank__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countryCode",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBank_FieldNumber_CountryCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POLISHAPIBank__storage_, countryCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressArray",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIBank_FieldNumber_AddressArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POLISHAPIBank__storage_, addressArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPIBank class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPIBank__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPITransactionInfoZus

@implementation POLISHAPITransactionInfoZus

@dynamic hasPayerInfo, payerInfo;
@dynamic contributionType;
@dynamic contributionId;
@dynamic contributionPeriod;
@dynamic paymentTypeId;
@dynamic obligationId;

typedef struct POLISHAPITransactionInfoZus__storage_ {
  uint32_t _has_storage_[1];
  POLISHAPISocialSecurityPayer *payerInfo;
  NSString *contributionType;
  NSString *contributionId;
  NSString *contributionPeriod;
  NSString *paymentTypeId;
  NSString *obligationId;
} POLISHAPITransactionInfoZus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPISocialSecurityPayer),
        .number = POLISHAPITransactionInfoZus_FieldNumber_PayerInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoZus__storage_, payerInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contributionType",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoZus_FieldNumber_ContributionType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoZus__storage_, contributionType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contributionId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoZus_FieldNumber_ContributionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoZus__storage_, contributionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contributionPeriod",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoZus_FieldNumber_ContributionPeriod,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoZus__storage_, contributionPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paymentTypeId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoZus_FieldNumber_PaymentTypeId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoZus__storage_, paymentTypeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "obligationId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoZus_FieldNumber_ObligationId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoZus__storage_, obligationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPITransactionInfoZus class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPITransactionInfoZus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPITransactionInfoTax

@implementation POLISHAPITransactionInfoTax

@dynamic hasPayerInfo, payerInfo;
@dynamic formCode;
@dynamic periodId;
@dynamic periodType;
@dynamic year;
@dynamic obligationId;

typedef struct POLISHAPITransactionInfoTax__storage_ {
  uint32_t _has_storage_[1];
  int32_t year;
  POLISHAPIPayer *payerInfo;
  NSString *formCode;
  NSString *periodId;
  NSString *periodType;
  NSString *obligationId;
} POLISHAPITransactionInfoTax__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(POLISHAPIPayer),
        .number = POLISHAPITransactionInfoTax_FieldNumber_PayerInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoTax__storage_, payerInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "formCode",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoTax_FieldNumber_FormCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoTax__storage_, formCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "periodId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoTax_FieldNumber_PeriodId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoTax__storage_, periodId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "periodType",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoTax_FieldNumber_PeriodType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoTax__storage_, periodType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "year",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoTax_FieldNumber_Year,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoTax__storage_, year),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "obligationId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoTax_FieldNumber_ObligationId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoTax__storage_, obligationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPITransactionInfoTax class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPITransactionInfoTax__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPITransactionInfoCard

@implementation POLISHAPITransactionInfoCard

@dynamic cardHolder;
@dynamic cardNumber;

typedef struct POLISHAPITransactionInfoCard__storage_ {
  uint32_t _has_storage_[1];
  NSString *cardHolder;
  NSString *cardNumber;
} POLISHAPITransactionInfoCard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardHolder",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoCard_FieldNumber_CardHolder,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoCard__storage_, cardHolder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardNumber",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPITransactionInfoCard_FieldNumber_CardNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPITransactionInfoCard__storage_, cardNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPITransactionInfoCard class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPITransactionInfoCard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPISocialSecurityPayer

@implementation POLISHAPISocialSecurityPayer

@dynamic nip;
@dynamic additionalPayerId;
@dynamic additionalPayerIdType;

typedef struct POLISHAPISocialSecurityPayer__storage_ {
  uint32_t _has_storage_[1];
  NSString *nip;
  NSString *additionalPayerId;
  NSString *additionalPayerIdType;
} POLISHAPISocialSecurityPayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nip",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPISocialSecurityPayer_FieldNumber_Nip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPISocialSecurityPayer__storage_, nip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "additionalPayerId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPISocialSecurityPayer_FieldNumber_AdditionalPayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPISocialSecurityPayer__storage_, additionalPayerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "additionalPayerIdType",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPISocialSecurityPayer_FieldNumber_AdditionalPayerIdType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPISocialSecurityPayer__storage_, additionalPayerIdType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPISocialSecurityPayer class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPISocialSecurityPayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPIPayer

@implementation POLISHAPIPayer

@dynamic payerId;
@dynamic payerIdType;

typedef struct POLISHAPIPayer__storage_ {
  uint32_t _has_storage_[1];
  NSString *payerId;
  NSString *payerIdType;
} POLISHAPIPayer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerId",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPayer_FieldNumber_PayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPIPayer__storage_, payerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payerIdType",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPIPayer_FieldNumber_PayerIdType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPIPayer__storage_, payerIdType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPIPayer class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPIPayer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POLISHAPICurrencyRate

@implementation POLISHAPICurrencyRate

@dynamic rate;
@dynamic fromCurrency;
@dynamic toCurrency;

typedef struct POLISHAPICurrencyRate__storage_ {
  uint32_t _has_storage_[1];
  NSString *fromCurrency;
  NSString *toCurrency;
  double rate;
} POLISHAPICurrencyRate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPICurrencyRate_FieldNumber_Rate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POLISHAPICurrencyRate__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "fromCurrency",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPICurrencyRate_FieldNumber_FromCurrency,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POLISHAPICurrencyRate__storage_, fromCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toCurrency",
        .dataTypeSpecific.className = NULL,
        .number = POLISHAPICurrencyRate_FieldNumber_ToCurrency,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POLISHAPICurrencyRate__storage_, toCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POLISHAPICurrencyRate class]
                                     rootClass:[POLISHAPIPolishapiRoot class]
                                          file:POLISHAPIPolishapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POLISHAPICurrencyRate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
